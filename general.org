* Auto package update
automatically updates emacs packages
https://tsdh.org/posts/2021-06-06-update-all-emacs-packages-from-the-command-line.html
#+begin_src emacs-lisp
(use-package auto-package-update
  :config (setq auto-package-update-delete-old-versions t))
#+end_src
now we can run it from CLI `$ emacs -f auto-package-update-now`
* Helm
#+BEGIN_SRC emacs-lisp
  (use-package helm
    :hook (helm-mode-hook . (lambda () (setq completion-styles '(flex))))
    :bind(("C-x C-f" . 'helm-find-files)
	  ("C-x C-b" . 'helm-buffers-list)
	  ("C-x b" . 'helm-mini)
	  ("M-x" . 'helm-M-x)
	  ("M-y" . 'helm-show-kill-ring)
	  ("M-:" . 'helm-eval-expression-with-eldoc))
    :config (setq helm-autoresize-max-height 60
	     helm-M-x-fuzzy-match t
	     helm-buffers-fuzzy-matching t
	     helm-recentf-fuzzy-match t
	     helm-semantic-fuzzy-match t
	     helm-imenu-fuzzy-match t
	     helm-mode-to-line-cycle-in-source t
	     helm-ff-search-library-in-sexp t
	     helm-scroll-amount 8
	     helm-echo-input-in-header-line t
	     helm-ff-skip-boring-files t
	     helm-autoresize-mode t
	     helm-always-two-windows t
	     helm-split-window-inside-p nil
	     helm-use-frame-when-dedicated-window t
	     helm-use-frame-when-more-than-two-windows t
	     helm-kill-ring-threshold 1)
    (helm-mode 1))
#+END_SRC

** Hide minibuffer
http://tuhdo.github.io/helm-intro.html
#+BEGIN_SRC emacs-lisp
  (defun spacemacs//helm-hide-minibuffer-maybe ()
    "Hide minibuffer in Helm session if we use the header line as input field."
    (when (with-helm-buffer helm-echo-input-in-header-line)
      (let ((ov (make-overlay (point-min) (point-max) nil nil t)))
	(overlay-put ov 'window (selected-window))
	(overlay-put ov 'face
		     (let ((bg-color (face-background 'default nil)))
		       `(:background ,bg-color :foreground ,bg-color)))
	(setq-local cursor-type nil))))

  (add-hook 'helm-minibuffer-set-up-hook
	    'spacemacs//helm-hide-minibuffer-maybe)
#+END_SRC

** Swipper
#+BEGIN_SRC emacs-lisp
  (use-package swiper-helm
    :bind ("C-s" . swiper-helm)
    :ensure t)
#+END_SRC

** help-rg
#+begin_src emacs-lisp
(use-package helm-rg)
#+end_src

* Multiterm
#+BEGIN_SRC emacs-lisp
(use-package multi-term
  :ensure t
  :bind ("<f6>" . multi-term-dedicated-toggle)
    ("C-c C-c" . term-interrupt-subjob)
  :custom (multi-term-program "/bin/zsh")
  (multi-term-dedicated-close-back-to-open-buffer-p t)
  (multi-term-dedicated-select-after-open-p t))
#+END_SRC

* Projectile
#+BEGIN_SRC emacs-lisp
(use-package projectile
  :ensure t
  :init (projectile-mode +1)
  :custom (projectile-completion-system 'helm)
  :bind ("C-c p" . projectile-command-map))
#+END_SRC

** Helm projectile
#+BEGIN_SRC emacs-lisp
(use-package helm-projectile
  :custom (projectile-completion-system 'helm)
  :ensure t
  :bind ("C-c p s" . helm-projectile-rg))
#+END_SRC

* Org
#+BEGIN_SRC emacs-lisp
(use-package org
  :pin gnu
  :bind ("C-<tab>" . org-cycle)
  :config (plist-put org-format-latex-options :scale 2.0))

(setq-default org-confirm-babel-evaluate nil)

(setq org-startup-indented t
      org-ellipsis "  "
      org-pretty-entities t
      org-hide-emphasis-markers t
      org-fontify-whole-heading-line t
      org-fontify-done-headline t
      org-fontify-quote-and-verse-blocks t)
#+END_SRC

** Org mode as the *scratch* buffer
#+begin_src emacs-lisp
(setq initial-major-mode 'org-mode)
#+end_src

** Visual stuff
#+begin_src emacs-lisp
(add-hook 'org-mode-hook #'toggle-word-wrap)
(add-hook 'org-mode-hook #'org-indent-mode)
(add-hook 'org-mode-hook #'turn-on-visual-line-mode)

(setq org-hide-emphasis-markers t
      org-edit-src-content-indentation 0
      org-src-tab-acts-natively t
      org-src-fontify-natively t
      org-src-preserve-indentation t
      org-confirm-babel-evaluate t
      org-support-shift-select 'always)

(font-lock-add-keywords 'org-mode
                        '(("^ *\\([-]\\) "
                           (0 (prog1 () (compose-region (match-beginning 1) (match-end 1) "•"))))))

(custom-theme-set-faces
 'user
 '(org-code ((t (:inherit (shadow fixed-pitch)))))
  '(org-indent ((t (:inherit (org-hide fixed-pitch))))))
#+end_src

*** Different font size for headlines
https://zzamboni.org/post/beautifying-org-mode-in-emacs/
#+begin_src emacs-lisp
(when window-system
  (progn
(let* ((variable-tuple
        (cond ((x-list-fonts "Cascadia Mono")         '(:font "Cascadia Mono"))
              ((x-list-fonts "Source Sans Pro") '(:font "Source Sans Pro"))
              ((x-list-fonts "Lucida Grande")   '(:font "Lucida Grande"))
              ((x-list-fonts "Verdana")         '(:font "Verdana"))
              ((x-family-fonts "Sans Serif")    '(:family "Sans Serif"))
              (nil (warn "Cannot find a Sans Serif Font.  Install Source Sans Pro."))))
       (headline `(:weight bold)))

  (custom-theme-set-faces
   'user
   `(org-level-8 ((t (,@headline ,@variable-tuple))))
   `(org-level-7 ((t (,@headline ,@variable-tuple))))
   `(org-level-6 ((t (,@headline ,@variable-tuple))))
   `(org-level-5 ((t (,@headline ,@variable-tuple))))
   `(org-level-4 ((t (,@headline ,@variable-tuple :height 1.1))))
   `(org-level-3 ((t (,@headline ,@variable-tuple :height 1.25))))
   `(org-level-2 ((t (,@headline ,@variable-tuple :height 1.5))))
   `(org-level-1 ((t (,@headline ,@variable-tuple :height 1.75))))
   `(org-document-title ((t (,@headline ,@variable-tuple :height 2.0 :underline nil))))))))
#+end_src

*** Pretty checkboxes
 https://jft.home.blog/2019/07/17/use-unicode-symbol-to-display-org-mode-checkboxes/
 #+BEGIN_SRC emacs-lisp
(defface org-checkbox-done-text
  '((t (:foreground "#71696A" :strike-through t)))
  "Face for the text part of a checked org-mode checkbox.")

(font-lock-add-keywords
 'org-mode
 `(("^[ \t]*\\(?:[-+*]\\|[0-9]+[).]\\)[ \t]+\\(\\(?:\\[@\\(?:start:\\)?[0-9]+\\][ \t]*\\)?\\[\\(?:X\\|\\([0-9]+\\)/\\2\\)\\][^\n]*\n\\)"
    1 'org-checkbox-done-text prepend))
 'append)
 #+END_SRC

** Org bullets
#+begin_src emacs-lisp
(use-package org-bullets
  :hook org-mode-hook)
#+end_src

** Org templates
*** Elisp template
#+BEGIN_SRC emacs-lisp
(add-to-list 'org-structure-template-alist '("se" . "src emacs-lisp"))
#+END_SRC
*** Haskell template
#+BEGIN_SRC emacs-lisp
(add-to-list 'org-structure-template-alist '("sh" . "src haskell"))
#+END_SRC
*** Python template
#+BEGIN_SRC emacs-lisp
(add-to-list 'org-structure-template-alist '("sp" . "src python"))
#+END_SRC
*** Rust template
#+BEGIN_SRC emacs-lisp
(add-to-list 'org-structure-template-alist '("sr" . "src rust"))
#+END_SRC

*** Graphviz template
#+BEGIN_SRC emacs-lisp
(add-to-list 'org-structure-template-alist '("sd" . "src dot :cmdline -Kdot -Tpng  :file "))
#+END_SRC
 
** Org export
*** Org reveal
#+BEGIN_SRC emacs-lisp
(use-package ox-reveal
  :ensure t
  :init (use-package htmlize
          :ensure t)
  :custom (org-reveal-mathjax t))
#+END_SRC

*** Org export to Github Markdown
#+BEGIN_SRC emacs-lisp
(use-package ox-gfm
  :ensure t)
#+END_SRC

** Org noter
#+BEGIN_SRC emacs-lisp
;; (use-package org-noter
;;   :ensure t)
#+END_SRC

** Org babel
#+BEGIN_SRC emacs-lisp
;; (require 'ox-latex)
;; (org-babel-do-load-languages 'org-babel-load-languages
;;                              '((python . t)
;;                                (latex . t)
;;                                (gnuplot . t)
;;                                (dot . t)))
#+END_SRC

* Avy mode
** Avy goto char timer 
#+BEGIN_SRC emacs-lisp
(global-set-key (kbd "C-:") 'avy-goto-char-timer)
#+END_SRC
* Git
** Magit
#+BEGIN_SRC emacs-lisp
  (use-package magit
    :ensure t)
#+END_SRC

* Which key
#+BEGIN_SRC emacs-lisp
(use-package which-key
  :custom (which-key-popup-type 'minibuffer)
  (which-key-show-early-on-C-h t)
  (which-key-idle-delay 0.25)
  (which-key-idle-secondary-delay 0.05)
  (max-mini-window-height 0.25)
  :config (which-key-mode)
  :bind ("C-c c w" . which-key-show-major-mode))
#+END_SRC

* Spell
** Flyspell popup
#+BEGIN_SRC emacs-lisp
(use-package flyspell-popup
  :ensure t
  :hook (flyspell-mode . flyspell-popup-auto-correct-mode)
  :bind ("C-." . flyspell-popup-autocorrect))
#+END_SRC
** Flyspell lazy
#+BEGIN_SRC emacs-lisp
(use-package flyspell-lazy
  :ensure t)
#+END_SRC

** Aspell
https://blog.binchen.org/posts/what-s-the-best-spell-check-set-up-in-emacs.html
#+BEGIN_SRC emacs-lisp
(defmacro require-init (pkg)
  `(load (file-truename (format "~/.emacs.d/elisp/%s" ,pkg)) t t))

(require-init 'init-spelling)
#+END_SRC

* Anzu
#+BEGIN_SRC emacs-lisp
(use-package anzu
  :ensure t
  :config
  (global-anzu-mode +1)
  (global-set-key [remap query-replace-regexp] 'anzu-query-replace-regexp)
  (global-set-key [remap query-replace] 'anzu-query-replace)
  :custom ((anzu-replace-to-string-separator " => "))
  :bind ("C-S-r" . 'anzu-query-replace-at-cursor)
  ("C-r" . 'anzu-query-replace-regexp))
#+END_SRC

* PDF
** PDF tools
#+BEGIN_SRC emacs-lisp
;; (use-package pdf-tools)
;; (add-hook 'TeX-after-compilation-finished-functions #'TeX-revert-document-buffer)
#+END_SRC
** Org pdftools
#+BEGIN_SRC emacs-lisp
;; (use-package org-pdftools
;;   :ensure t
;;   :hook (org-load . org-pdftools-setup-link))

;; (add-hook 'pdf-view-mode-hook 'pdf-view-midnight-minor-mode)
;; (add-hook 'pdf-view-mode-hook 'pdf-view-fit-height-to-window)
;; (add-hook 'pdf-view-mode-hook 'auto-revert-mode)

;; (setq org-file-apps
;;       '((auto-mode . emacs)))
#+END_SRC
** Org noter pdftools
#+BEGIN_SRC emacs-lisp
;; (use-package org-noter-pdftools
;;   :ensure t
;;   :config (with-eval-after-load 'pdf-annot
;;             (add-hook 'pdf-annot-activate-handler-functions #'org-noter-pdftools-jump-to-note)))
#+END_SRC
* Latex
** Latex preview
#+BEGIN_SRC emacs-lisp
;; (use-package latex-preview-pane
;;   :ensure t)
#+END_SRC

** Latex pretty symbols
#+BEGIN_SRC emacs-lisp
;; (use-package latex-pretty-symbols
;;   :ensure t)
#+END_SRC

** Latex Auctex
#+BEGIN_SRC emacs-lisp
;; (use-package auctex
;;   :ensure t
;;   :defer t)
#+END_SRC
** Company auctex
#+BEGIN_SRC emacs-lisp
;; (use-package company-auctex
;;   :ensure t
;;   :init (company-auctex-init))
#+END_SRC
** abntex
https://github.com/luksamuk/emacs-org-dotfiles#latex
#+begin_src emacs-lisp
;; (require 'ox-latex)
;; (unless (boundp 'org-latex-classes)
;;   (setq org-latex-classes nil))

;; (add-to-list 'org-latex-classes
;; 	     '("abntex2"
;; 	       "\\documentclass{abntex2}
;; 		  [NO-DEFAULT-PACKAGES]
;; 		  [EXTRA]"
;; 	       ("\\section{%s}" . "\\section*{%s}")
;; 	       ("\\subsection{%s}" . "\\subsection*{%s}")
;; 	       ("\\subsubsection{%s}" . "\\subsubsection*{%s}")
;; 	       ("\\paragraph{%s}" . "\\paragraph*{%s}")
;; 	       ("\\subparagraph{%s}" . "\\subparagraph*{%s}")
;; 	       ("\\maketitle" . "\\imprimircapa")))

;; (add-to-list 'org-latex-classes
;;              '("standalone"
;;                "\\documentclass{standalone}
;;                 [NO-DEFAULT-PACKAGES]"))

;; (setq org-latex-inputenc-alist '(("utf8" . "utf8x")))
#+end_src

* Dockerfile
#+BEGIN_SRC emacs-lisp
(use-package dockerfile-mode
  :ensure t)
#+END_SRC
* Expand region
#+BEGIN_SRC emacs-lisp
(use-package expand-region
  :ensure t
  :commands (er/expand-region er/contract-region)
  :bind ("C-c C-=" . 'er/expand-region)
  ("C-c C--" . 'er/contract-region)
  :config (pending-delete-mode 1))
#+END_SRC
* Moving lines around
#+BEGIN_SRC emacs-lisp
(use-package drag-stuff
  :ensure t
  :hook (prog-mode . drag-stuff-mode)
  :config (drag-stuff-define-keys))
#+END_SRC

* Utilities
** Quick edit configuration files
#+BEGIN_SRC emacs-lisp
(defun consoli/edit-config ()
  "Easy open configuration file."
  (interactive)
  (find-file (concat user-emacs-directory "config.org")))
(global-set-key (kbd "S-<f1>") 'consoli/edit-config)
#+END_SRC

** Create a new scratch buffer 
#+BEGIN_SRC emacs-lisp
(defun consoli/create-scratch-buffer ()
  "Create a scratch buffer"
  (interactive)
  (switch-to-buffer (get-buffer-create "*scratch*"))
  (lisp-interaction-mode))
(global-set-key (kbd "<C-f12>") 'consoli/create-scratch-buffer)
#+END_SRC

** Configure backup files
#+BEGIN_SRC emacs-lisp
(defconst consoli/backup_dir
  (concat user-emacs-directory "backups"))

(if (not (file-exists-p consoli/backup_dir))
    (make-directory consoli/backup_dir t))

(setq backup-directory-alist
      `(("." . ,consoli/backup_dir)))

(setq backup-by-copying t
      delete-old-versions t
      kept-new-versions 3
      kept-old-versions 2
      version-control t)
#+END_SRC

** No auto-save files
#+BEGIN_SRC emacs-lisp
(setq auto-save-default nil)
#+END_SRC

** Increase/Decrease font size
#+BEGIN_SRC emacs-lisp
(global-set-key (kbd "C-+") #'text-scale-increase)
(global-set-key (kbd "C--") #'text-scale-decrease)
#+END_SRC

** Better scroll
#+BEGIN_SRC emacs-lisp
(setq scroll-conservatively 9999
      scroll-preserve-screen-position t
      scroll-margin 5)
#+END_SRC

** No bell
#+BEGIN_SRC emacs-lisp
(setq ring-bell-function 'ignore)
#+END_SRC

** y or n instead of yes or no
#+BEGIN_SRC emacs-lisp
(defalias 'yes-or-no-p 'y-or-n-p)
#+END_SRC

** Kill current buffer
https://superuser.com/a/1419521
#+BEGIN_SRC emacs-lisp
(defun consoli/kill-this-buffer ()
  "Kill the current buffer"
  (interactive)
  (kill-buffer (current-buffer)))
(global-set-key (kbd "C-x k") 'consoli/kill-this-buffer)
#+END_SRC

** No welcome message or scratch buffer message
#+BEGIN_SRC emacs-lisp
(setq inhibit-startup-message t
      initial-scratch-message nil
      inhibit-startup-echo-area-message t
      org-edit-src-persistent-message nil)
#+END_SRC

** Save last cursor position
#+BEGIN_SRC emacs-lisp
(save-place-mode 1)
#+END_SRC

** Easy move around frames with s-arrows
#+BEGIN_SRC emacs-lisp
(windmove-default-keybindings)
#+END_SRC

** Whitespaces
*** Kill whitespaces
#+BEGIN_SRC emacs-lisp
(global-set-key (kbd "S-<f10>") 'whitespace-cleanup)
#+END_SRC

*** Show whitespaces
#+BEGIN_SRC emacs-lisp
(global-set-key (kbd "<f10>") 'whitespace-mode)
#+END_SRC

*** Braille whitespaces
#+BEGIN_SRC emacs-lisp
(setq whitespace-style '(space-mark))
(setq whitespace-display-mappings '((space-mark 32 [183] [46])))
(setq whitespace-style '(face spaces space-mark))

(add-hook 'prog-mode 'whitespace-mode)
#+END_SRC

** Smart new line
   https://gist.github.com/brianloveswords/e23cedf3a80bab675fe5
   #+BEGIN_SRC emacs-lisp
(defun consoli/smart-newline ()
  "Add two newlines and put the cursor at the right indentation
     between them if a newline is attempted when the cursor is between
     two curly braces, otherwise do a regular newline and indent"
  (interactive)
  (if (or
       (and (equal (char-before) 123) ; {
            (equal (char-after) 125)) ; }
       (and (equal (char-before) 40)  ; (
            (equal (char-after) 41))) ; )
      (progn (newline-and-indent)
             (split-line)
             (indent-for-tab-command))
    (newline-and-indent)))
(global-set-key (kbd "RET") 'consoli/smart-newline)
   #+END_SRC

** Insert new line bellow
#+BEGIN_SRC emacs-lisp
(defun consoli/insert-new-line-bellow ()
  (interactive)
  (let ((current-point (point)))
    (move-end-of-line 1)
    (open-line 1)
    (goto-char current-point)))
(global-set-key (kbd "C-S-<down>") 'consoli/insert-new-line-bellow)
#+END_SRC

** Insert new line up
#+BEGIN_SRC emacs-lisp
(defun consoli/insert-new-line-above ()
  (interactive)
  (let ((current-point (point)))
    (move-beginning-of-line 1)
    (newline-and-indent)
    (indent-according-to-mode)
    (goto-char current-point)
    (forward-char)))
(global-set-key (kbd "C-S-<up>") 'consoli/insert-new-line-above)
#+END_SRC

** Set default browser to Firefox
#+BEGIN_SRC emacs-lisp
(setq browser-url-browse-function 'browse-url-firefox)
#+END_SRC 

** Set indentation to use spaces
#+BEGIN_SRC emacs-lisp
(setq-default indent-tabs-mode nil)
(setq-default tab-width 4)

(defun consoli/infer-indentation-style ()
  "If our souce file use tabs, we use tabs, if spaces, spaces.
  And if neither, we use the current indent-tabs-mode"
  (let ((space-count (how-many "^ " (point-min) (point-max)))
        (tab-count (how-many "^\t" (point-min) (point-max))))
    (if (> space-count tab-count) (setq indent-tabs-mode nil))
    (if (> tab-count space-count) (setq indent-tabs-mode t))))
(add-hook 'prog-mode-hook #'consoli/infer-indentation-style)
#+END_SRC

** List all todos
#+BEGIN_SRC emacs-lisp
(use-package comment-tags
  :ensure t
  :config (setq comment-tags-keymap-prefix (kbd "C-c t"))
  (setq comment-tags-keyword-faces
        `(("TODO" . ,(list :weight 'bold :foreground "#FE2200"))
          ("FIXME" . ,(list :weight 'bold :foreground "#D11D1D"))
          ("BUG" . ,(list :weight 'bold :foreground "#FF070E" ))
          ("INFO" . ,(list :weight 'bold :foreground "#08051B"))
          ("HACK" . ,(list :weight 'bold :foreground "#00FF00"))
          ("EXAMPLE" . ,(list :weight 'bold :foreground "#008EB3"))))
  :custom (comment-tags-comment-start-only t)
  (comment-tags-require-colon t)
  (comment-tags-case-sensitive t)
  (comment-tags-show-faces t)
  (comment-tags-lighter nil)
  :hook prog-mode-hook)
#+END_SRC

** Undo tree
#+BEGIN_SRC emacs-lisp
(use-package undo-tree
  :ensure t
  :init (global-undo-tree-mode))
#+END_SRC

** Translate
#+BEGIN_SRC emacs-lisp
(use-package google-translate
  :ensure t
  :bind ("C-S-SPC" . google-translate-smooth-translate)
  :custom (google-translate-translation-directions-alist
           '(("en" . "pt")
             ("pt" . "en")))
  (google-translate-output-destination 'popup)
  (google-translate-show-phonetic t))
#+END_SRC

** Smart go to beginning
#+BEGIN_SRC emacs-lisp
(defun smarter-beginning-of-line (arg)
  "Move point back to indentation of beginning of line.
Move point to the first non-whitespace character on this line.
If point is already there, move to the beginning of the line.
Effectively toggle between the first non-whitespace character and the beginning of the line.
If ARG is not nil or 1, move forward ARG - 1 lines first. If point reaches the beginning or end of the buffer, stop there."

  (interactive "^p")
  (setq arg (or arg 1))
  (when (/= arg 1)
    (let ((line-move-visual nil))
      (forward-line (1- arg))))
  (let ((orig-point (point)))
    (back-to-indentation)
    (when (= orig-point (point))
      (move-beginning-of-line 1))))

(global-set-key [remap move-beginning-of-line] 'smarter-beginning-of-line)
#+END_SRC

** auto reload files
#+begin_src emacs-lisp
(global-auto-revert-mode t)
#+end_src
** hide unwanted buffers cycling with c-x <left-right>
https://emacs.stackexchange.com/questions/27749/how-can-i-hide-unwanted-buffers-when-cycling-with-c-x-left-right
#+begin_src emacs-lisp
(set-frame-parameter (selected-frame) 'buffer-predicate #'buffer-file-name)
#+end_src
** dwin
#+begin_src emacs-lisp
(global-set-key (kbd "M-u") 'upcase-dwim)
(global-set-key (kbd "M-l") 'downcase-dwim)
(global-set-key (kbd "M-c") 'capitalize-dwim)
#+end_src

** easy-kill
#+begin_src emacs-lisp
(use-package easy-kill)
(global-set-key [remap kill-ring-save] 'easy-kill)
#+end_src

** crux
#+begin_src emacs-lisp
(use-package crux)
(global-set-key [remap move-beginning-of-line] #'crux-move-beginning-of-line)
(global-set-key (kbd "C-c C-o") #'crux-open-with)
(global-set-key [(shift return)] #'crux-smart-open-line)
(global-set-key (kbd "C-c C-r") #'crux-recentf-find-file)
(global-set-key (kbd "C-c C-<backspace>") #'crux-kill-line-backwards)
(global-set-key [remap kill-whole-line] #'crux-kill-whole-line)
#+end_src

** DONT FREEZE
#+begin_src emacs-lisp
(global-unset-key (kbd "C-z"))
#+end_src

** delete selection
#+begin_src emacs-lisp
(delete-selection-mode t)
#+end_src

** smooth scrolling
#+begin_src emacs-lisp
(use-package good-scroll
  :init (good-scroll-mode 1))
(setq redisplay-dont-pause t)
#+end_src
