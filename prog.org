* Code completion & generation
** Company
https://github.com/liguangsheng/emacsd/blob/master/lisp/init-completion.el
#+BEGIN_SRC emacs-lisp
(use-package company
  :diminish company-mode
  :defines (company-dabbrev-ignore-case company-dabbrev-downcase)
  :commands company-abort
  :hook (after-init . global-company-mode)
  :init
  (defun my-company-yasnippet ()
    (interactive)
    (company-abort)
    (call-interactively 'company-yasnippet))
  :custom ((company-tooltip-align-annotations t)
           (company-tooltip-limit 12)
           (company-idle-delay 0.0)
           (company-echo-delay (if (display-graphic-p) nil 0))
           (company-minimum-prefix-length 1)
           (company-require-match nil)
           (company-dabbrev-ignore-case nil)
           (company-dabbrev-downcase nil)))
#+END_SRC

*** Company Prescient
#+BEGIN_SRC emacs-lisp
;; (use-package company-prescient
;;   :ensure t
;;   :init (company-prescient-mode))
#+END_SRC

*** Company box
https://github.com/seagle0128/.emacs.d/blob/master/lisp/init-company.el

#+BEGIN_SRC emacs-lisp
  (use-package company-box
        :diminish
        :functions (my-company-box--make-line
                    my-company-box-icons--elisp)
        :commands (company-box--get-color
                   company-box--resolve-colors
                   company-box--add-icon
                   company-box--apply-color
                   company-box--make-line
                   company-box-icons--elisp)
        :hook (company-mode . company-box-mode)
        :custom (company-box-backends-colors nil)
        (company-box-show-single-candidate t)
        (company-box-max-candidates 50)
        (company-box-doc-delay 0.5)
        (company-box-icons-alist 'company-box-icons-all-the-icons)
        :config
        ;; Support `company-common'
        (defun my-company-box--make-line (candidate)
          (-let* (((candidate annotation len-c len-a backend) candidate)
                  (color (company-box--get-color backend))
                  ((c-color a-color i-color s-color) (company-box--resolve-colors color))
                  (icon-string (and company-box--with-icons-p (company-box--add-icon candidate)))
                  (candidate-string (concat (propertize (or company-common "") 'face 'company-tooltip-common)
                                            (substring (propertize candidate 'face 'company-box-candidate) (length company-common) nil)))
                  (align-string (when annotation
                                  (concat " " (and company-tooltip-align-annotations
                                                   (propertize " " 'display `(space :align-to (- right-fringe ,(or len-a 0) 1)))))))
                  (space company-box--space)
                  (icon-p company-box-enable-icon)
                  (annotation-string (and annotation (propertize annotation 'face 'company-box-annotation)))
                  (line (concat (unless (or (and (= space 2) icon-p) (= space 0))
                                  (propertize " " 'display `(space :width ,(if (or (= space 1) (not icon-p)) 1 0.75))))
                                (company-box--apply-color icon-string i-color)
                                (company-box--apply-color candidate-string c-color)
                                align-string
                                (company-box--apply-color annotation-string a-color)))
                  (len (length line)))
            (add-text-properties 0 len (list 'company-box--len (+ len-c len-a)
                                             'company-box--color s-color)
                                 line)
            line))
        (advice-add #'company-box--make-line :override #'my-company-box--make-line)

        ;; Prettify icons
        (defun my-company-box-icons--elisp (candidate)
          (when (derived-mode-p 'emacs-lisp-mode)
            (let ((sym (intern candidate)))
              (cond ((fboundp sym) 'Function)
                    ((featurep sym) 'Module)
                    ((facep sym) 'Color)
                    ((boundp sym) 'Variable)
                    ((symbolp sym) 'Text)
                    (t . nil)))))
        (advice-add #'company-box-icons--elisp :override #'my-company-box-icons--elisp)

        (with-eval-after-load 'all-the-icons
          (declare-function all-the-icons-faicon 'all-the-icons)
          (declare-function all-the-icons-material 'all-the-icons)
          (setq company-box-icons-all-the-icons
                `((Unknown . ,(all-the-icons-material "find_in_page" :height 0.9 :v-adjust -0.2))
                  (Text . ,(all-the-icons-faicon "text-width" :height 0.85 :v-adjust -0.05))
                  (Method . ,(all-the-icons-faicon "cube" :height 0.85 :v-adjust -0.05 :face 'all-the-icons-purple))
                  (Function . ,(all-the-icons-faicon "cube" :height 0.85 :v-adjust -0.05 :face 'all-the-icons-purple))
                  (Constructor . ,(all-the-icons-faicon "cube" :height 0.85 :v-adjust -0.05 :face 'all-the-icons-purple))
                  (Field . ,(all-the-icons-faicon "tag" :height 0.85 :v-adjust -0.05 :face 'all-the-icons-lblue))
                  (Variable . ,(all-the-icons-faicon "tag" :height 0.85 :v-adjust -0.05 :face 'all-the-icons-lblue))
                  (Class . ,(all-the-icons-material "settings_input_component" :height 0.9 :v-adjust -0.2 :face 'all-the-icons-orange))
                  (Interface . ,(all-the-icons-material "share" :height 0.9 :v-adjust -0.2 :face 'all-the-icons-lblue))
                  (Module . ,(all-the-icons-material "view_module" :height 0.9 :v-adjust -0.2 :face 'all-the-icons-lblue))
                  (Property . ,(all-the-icons-faicon "wrench" :height 0.85 :v-adjust -0.05))
                  (Unit . ,(all-the-icons-material "settings_system_daydream" :height 0.9 :v-adjust -0.2))
                  (Value . ,(all-the-icons-material "format_align_right" :height 0.9 :v-adjust -0.2 :face 'all-the-icons-lblue))
                  (Enum . ,(all-the-icons-material "storage" :height 0.9 :v-adjust -0.2 :face 'all-the-icons-orange))
                  (Keyword . ,(all-the-icons-material "filter_center_focus" :height 0.9 :v-adjust -0.2))
                  (Snippet . ,(all-the-icons-material "format_align_center" :height 0.9 :v-adjust -0.2))
                  (Color . ,(all-the-icons-material "palette" :height 0.9 :v-adjust -0.2))
                  (File . ,(all-the-icons-faicon "file-o" :height 0.9 :v-adjust -0.05))
                  (Reference . ,(all-the-icons-material "collections_bookmark" :height 0.9 :v-adjust -0.2))
                  (Folder . ,(all-the-icons-faicon "folder-open" :height 0.9 :v-adjust -0.05))
                  (EnumMember . ,(all-the-icons-material "format_align_right" :height 0.9 :v-adjust -0.2 :face 'all-the-icons-lblue))
                  (Constant . ,(all-the-icons-faicon "square-o" :height 0.9 :v-adjust -0.05))
                  (Struct . ,(all-the-icons-material "settings_input_component" :height 0.9 :v-adjust -0.2 :face 'all-the-icons-orange))
                  (Event . ,(all-the-icons-faicon "bolt" :height 0.85 :v-adjust -0.05 :face 'all-the-icons-orange))
                  (Operator . ,(all-the-icons-material "control_point" :height 0.9 :v-adjust -0.2))
                  (TypeParameter . ,(all-the-icons-faicon "arrows" :height 0.85 :v-adjust -0.05))
                  (Template . ,(all-the-icons-material "format_align_center" :height 0.9 :v-adjust -0.2))))))
#+END_SRC

*** Company Quick Help
#+BEGIN_SRC emacs-lisp
(use-package company-quickhelp
  :defines company-quickhelp-delay
  :bind (:map company-active-map
              ([remap company-show-doc-buffer] . company-quickhelp-manual-begin))
  :init
  (setq company-quickhelp-delay 0.5)
  (company-quickhelp-mode 1))
#+END_SRC

*** COMMENT Company tabnine
    #+begin_src emacs-lisp
(use-package company-tabnine)

(add-to-list 'company-backends #'company-tabnine)
;; Trigger completion immediately.
(setq company-idle-delay 0)

;; Number the candidates (use M-1, M-2 etc to select completions).
(setq company-show-numbers t)

;; workaround for company-transformers
(setq company-tabnine--disable-next-transform nil)
(defun my-company--transform-candidates (func &rest args)
  (if (not company-tabnine--disable-next-transform)
      (apply func args)
    (setq company-tabnine--disable-next-transform nil)
    (car args)))

(defun my-company-tabnine (func &rest args)
  (when (eq (car args) 'candidates)
    (setq company-tabnine--disable-next-transform t))
  (apply func args))

(advice-add #'company--transform-candidates :around #'my-company--transform-candidates)
(advice-add #'company-tabnine :around #'my-company-tabnine)
   #+end_src

** Yasnippets
#+BEGIN_SRC emacs-lisp
(use-package yasnippet
  :ensure t
  :config (yas-reload-all)
  :init
  (progn
    (defun check-expansion ()
      (save-excursion
        (if (looking-at "\\_>") t
          (backward-char 1)
          (if (looking-at "\\.") t
            (backward-char 1)
            (if (looking-at "->") t nil)))))

    (defun do-yas-expand ()
      (let ((yas/fallback-behavior 'return-nil))
        (yas/expand)))

    (defun tab-indent-or-complete ()
      (interactive)
      (if (minibufferp)
          (minibuffer-complete)
        (if (or (not yas/minor-mode)
                (null (do-yas-expand)))
            (if (check-expansion)
                (company-complete-common)
              (indent-for-tab-command)))))

    (global-set-key [tab] 'tab-indent-or-complete)))
#+END_SRC

*** Yasnippets snippets
#+BEGIN_SRC emacs-lisp
  (use-package yasnippet-snippets
    :ensure t
    :config (yas-global-mode))
#+END_SRC
* Linter
** Flycheck
#+BEGIN_SRC emacs-lisp
(use-package flycheck
  :ensure t
  :config (global-flycheck-mode))
#+END_SRC

*** Quick Peek
#+BEGIN_SRC emacs-lisp
(use-package quick-peek
  :ensure t)
#+END_SRC

*** Flycheck inline
#+BEGIN_SRC emacs-lisp
(use-package flycheck-inline
  :ensure t)
(with-eval-after-load 'flycheck
  (add-hook 'flycheck-mode-hook #'flycheck-inline-mode))

(setq flycheck-inline-display-function
      (lambda (msg pos _unused)
        (let* ((ov (quick-peek-overlay-ensure-at pos))
               (contents (quick-peek-overlay-contents ov)))
          (setf (quick-peek-overlay-contents ov)
                (concat contents (when contents "\n") msg))
          (quick-peek-update ov)))
      flycheck-inline-clear-function #'quick-peek-hide)
#+END_SRC

* Debug
** DAP
#+BEGIN_SRC emacs-lisp
(use-package dap-mode
  :ensure t
  :config
  (require 'dap-mode)
  (require 'dap-python))
#+END_SRC

* iedit

#+begin_src emacs-lisp
(use-package iedit)
#+end_src


* Language Server Protocol
** LSP mode
#+BEGIN_SRC emacs-lisp
(use-package lsp-mode
  :custom (;; (lsp-auto-guess-root t)
           (lsp-eldoc-render-all nil)
           (lsp-file-watch-threshold 2000)
           (lsp-enable-indentation t)
           (lsp-semantic-highlighting t)
           (lsp-signature-auto-activate nil)
           (lsp-signature-render-documentation t)
           (lsp-enable-text-document-color t)
           (lsp-prefer-flymake nil) ;; use flycheck
           (lsp-auto-configure t)
           (lsp-enable-on-type-formatting nil)
           (lsp-enable-snippet t)
           (lsp-rust-server 'rust-analyzer)
           (lsp-keep-workspace-alive nil)
           (lsp-modeline-code-actions-mode t)
           (lsp-modeline-diagnostics-scope  :project)
           (lsp-keymap-prefix "C-c l"))
  :hook (lsp-mode . (lambda ()
                      (let ((lsp-keymap-prefix "C-c l"))
                        (lsp-enable-which-key-integration))))
  :bind (:map lsp-mode-map
              ("C-c l r" . lsp-rename)
              ("C-c l a" . lsp-execute-code-action)
              ("C-c l t" . lsp-find-type-definition)
              ("C-c l e" . lsp-iedit-highlights))
  :config (define-key lsp-mode-map (kbd "C-c l") lsp-command-map)
  :ensure t)
#+END_SRC

** LSP-UI
#+BEGIN_SRC emacs-lisp
(use-package lsp-ui
  :ensure t
  :hook (lsp-mode . lsp-ui-mode)
  :custom ((lsp-ui-doc-include-signature t)
           (lsp-ui-doc-enable t)
           (lsp-ui-doc-delay 5))
  :bind (:map lsp-ui-mode-map
              ([remap xref-find-definitions] . lsp-ui-peek-find-definitions)
              ([remap xref-find-references] . lsp-ui-peek-find-references)
              ("C-c l i" . lsp-ui-imenu)
              ("C-c l d" . lsp-ui-doc-show)))
#+END_SRC

** Treemacs compatibility
#+BEGIN_SRC emacs-lisp
(use-package lsp-treemacs
  :ensure t
  :commands lsp-treemacs-errors-list)
#+END_SRC

* Utilities
** Smart parens
#+BEGIN_SRC emacs-lisp
(use-package smartparens
  :ensure t
  :bind ("C-M-f" . 'sp-forward-sexp)
  ("C-M-b" . 'sp-backward-sexp)
  :config (smartparens-global-mode))

(add-hook 'prog-mode 'turn-on-smartparens-strict-mode)
(add-hook 'markdown-mode-hook 'turn-on-smartparens-strict-mode)
#+END_SRC

** Auto highlight
#+BEGIN_SRC emacs-lisp
(use-package auto-highlight-symbol
  :ensure t
  :custom-face (ahs-definition-face ((t (:background "dark orange" :foreground "black"))))
  (ahs-face ((t (:background "orange" :foreground "black"))))
  (ahs-plugin-defalt-face ((t (:background "#1E2029" :foreground "dark orange"))))
  :hook (prog-mode . auto-highlight-symbol-mode))
#+END_SRC

** Code format
#+BEGIN_SRC emacs-lisp
(use-package format-all
  :ensure t
  :bind ("<f7>" . format-all-buffer)
  :init (format-all-mode))
#+END_SRC

** Highlight indent guides
#+BEGIN_SRC emacs-lisp
(use-package highlight-indent-guides
  :ensure t
  :custom (highlight-indent-guides-method 'character)
  (highlight-indent-guides-character ?\┆)
  (highlight-indent-guides-auto-enabled t)
  (highlight-indent-guides-delay 0)
  (highlight-indent-guides-responsive 'stack)
  :hook (prog-mode . highlight-indent-guides-mode))
#+END_SRC

** Multiple cursors
#+BEGIN_SRC emacs-lisp
(use-package multiple-cursors
  :ensure t
  :bind (:map prog-mode-map
              ("C-c c <SPC>" . 'mc/edit-lines)
              ("C-c c >" . 'mc/mark-next-like-this)
              ("C-c c <" . 'mc/mark-previous-like-this)
              ("C-c c ." . 'mc/mark-all-like-this)))
#+END_SRC

** Markdown
#+begin_src emacs-lisp
(use-package markdown-mode
  :ensure t
  :commands (markdown-mode gfm-mode)
  :mode (("README\\.md\\'" . gfm-mode)
         ("\\.md\\'" . markdown-mode)
         ("\\.markdown\\'" . markdown-mode))
  :init (setq markdown-command "multimarkdown"))
#+end_src

* Treesitter
#+begin_src emacs-lisp
(use-package tree-sitter)
(use-package tree-sitter-langs)

;; enable tree-sitter for all supported major modes
(global-tree-sitter-mode)
(add-hook 'tree-sitter-after-on-hook #'tree-sitter-hl-mode)
#+end_src

* magit side by side diff
#+begin_src emacs-lisp
(setq magit-ediff-dwim-show-on-hunks t)
#+end_src
