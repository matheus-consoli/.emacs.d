* Code completion & generation
** Company
https://github.com/liguangsheng/emacsd/blob/master/lisp/init-completion.el
#+BEGIN_SRC emacs-lisp
(use-package company
  :defines (company-dabbrev-ignore-case company-dabbrev-downcase)
  :commands company-abort
  :init
  (global-company-mode 1)
  (defun my-company-yasnippet ()
    (interactive)
    (company-abort)
    (call-interactively 'company-yasnippet))
  :custom ((company-tooltip-align-annotations t)
           (company-tooltip-limit 12)
           (company-idle-delay 0.0)
           (company-echo-delay (if (display-graphic-p) nil 0))
           (company-minimum-prefix-length 1)
           (company-require-match nil)
           (company-dabbrev-ignore-case nil)
           (company-dabbrev-downcase nil)))
#+END_SRC

*** Company box
#+begin_src emacs-lisp
(use-package company-box
  :hook (company-mode . company-box-mode))
#+end_src

*** Company Quick Help
#+BEGIN_SRC emacs-lisp
(use-package company-quickhelp
  :defines company-quickhelp-delay
  :bind (:map company-active-map
              ([remap company-show-doc-buffer] . company-quickhelp-manual-begin))
  :init
  (setq company-quickhelp-delay 0.5)
  (company-quickhelp-mode 1))
#+END_SRC

** Yasnippets
#+BEGIN_SRC emacs-lisp
(use-package yasnippet
  :config (yas-reload-all)
  :hook prog-mode-hook)
#+END_SRC

*** Yasnippets snippets
#+BEGIN_SRC emacs-lisp
  (use-package yasnippet-snippets
    :ensure t
    :config (yas-global-mode))
#+END_SRC
* Linter
** Flycheck
#+BEGIN_SRC emacs-lisp
(use-package flycheck
  :ensure t
  :config (global-flycheck-mode))
#+END_SRC

*** Quick Peek
#+BEGIN_SRC emacs-lisp
;; (use-package quick-peek
;;   :ensure t)
#+END_SRC

*** Flycheck inline
#+BEGIN_SRC emacs-lisp
(use-package flycheck-inline
  :ensure t)
(with-eval-after-load 'flycheck
  (add-hook 'flycheck-mode-hook #'flycheck-inline-mode))

;; (setq flycheck-inline-display-function
;;       (lambda (msg pos _unused)
;;         (let* ((ov (quick-peek-overlay-ensure-at pos))
;;                (contents (quick-peek-overlay-contents ov)))
;;           (setf (quick-peek-overlay-contents ov)
;;                 (concat contents (when contents "\n") msg))
;;           (quick-peek-update ov)))
;;       flycheck-inline-clear-function #'quick-peek-hide)
#+END_SRC

* Debug
** DAP
#+BEGIN_SRC emacs-lisp
(use-package dap-mode
  :ensure t
  :config
  (require 'dap-mode)
  (require 'dap-python))
#+END_SRC

* iedit

#+begin_src emacs-lisp
(use-package iedit)
#+end_src


* Language Server Protocol
** LSP mode
#+BEGIN_SRC emacs-lisp
(use-package lsp-mode
  :init (setq lsp-keymap-prefix "C-c l"
              lsp-eldoc-render-all nil
              lsp-modeline-code-actions-mode t
              lsp-enable-on-type-formatting t
              lsp-enable-indentation t
              lsp-enable-folding t
              lsp-enable-snippet t
              lsp-semantic-tokens-enable nil
              lsp-lens-enable t
              lsp-log-io nil
              lsp-headerline-breadcrumb-icons-enable t
              lsp-idle-delay 0.2)
  :bind (:map lsp-mode-map
              ("C-c l r" . lsp-rename)
              ("C-c l a" . lsp-execute-code-action)
              ("C-c l t" . lsp-find-type-definition)
              ("C-c l e" . lsp-iedit-highlights))
  :hook (lsp-mode . lsp-enable-which-key-integration)
  :config (define-key lsp-mode-map (kbd "C-c l") lsp-command-map)
  :commands lsp)
#+END_SRC

** LSP-UI
#+BEGIN_SRC emacs-lisp
(use-package lsp-ui
  :init (setq lsp-ui-doc-enable t
              lsp-ui-sideline-show-diagnostics t
              lsp-ui-doc-delay 0.2
              lsp-ui-sideline-show-hover t
              lsp-ui-sideline-show-code-actions t
              lsp-ui-peek-show-directory t
              lsp-ui-doc-show-with-cursor t
              ;; lsp-ui-doc-use-webkit t
              lsp-completion-show-kind t
              lsp-completion-show-detail t
              lsp-ui-doc-show-with-mouse t)
  :bind (:map lsp-ui-mode-map
              ([remap xref-find-definitions] . lsp-ui-peek-find-definitions)
              ([remap xref-find-references] . lsp-ui-peek-find-references)
              ("C-c l i" . lsp-ui-imenu)
              ("C-c l d" . lsp-ui-doc-show)))
#+END_SRC

* Utilities
** Smart parens
#+BEGIN_SRC emacs-lisp
(use-package smartparens
  :ensure t
  :bind ("C-M-f" . 'sp-forward-sexp)
  ("C-M-b" . 'sp-backward-sexp)
  :config (smartparens-global-mode))

(add-hook 'prog-mode 'turn-on-smartparens-strict-mode)
(add-hook 'markdown-mode-hook 'turn-on-smartparens-strict-mode)
#+END_SRC

** Auto highlight
#+BEGIN_SRC emacs-lisp
(use-package auto-highlight-symbol
  :ensure t
  :custom-face (ahs-definition-face ((t (:background "dark orange" :foreground "black"))))
  (ahs-face ((t (:background "orange" :foreground "black"))))
  (ahs-plugin-defalt-face ((t (:background "#1E2029" :foreground "dark orange"))))
  :hook (prog-mode . auto-highlight-symbol-mode))
#+END_SRC

** Code format
#+BEGIN_SRC emacs-lisp
(use-package format-all
  :ensure t
  :bind ("<f7>" . format-all-buffer)
  :init (format-all-mode))
#+END_SRC

** Highlight indent guides
#+BEGIN_SRC emacs-lisp
(use-package highlight-indent-guides
  :ensure t
  :custom (highlight-indent-guides-method 'character)
  (highlight-indent-guides-character ?\â”†)
  (highlight-indent-guides-auto-enabled t)
  (highlight-indent-guides-delay 0)
  (highlight-indent-guides-responsive 'stack)
  :hook (prog-mode . highlight-indent-guides-mode))
#+END_SRC

** Multiple cursors
#+BEGIN_SRC emacs-lisp
(use-package multiple-cursors
  :ensure t
  :bind (:map prog-mode-map
              ("C-c c <SPC>" . 'mc/edit-lines)
              ("C-c c >" . 'mc/mark-next-like-this)
              ("C-c c <" . 'mc/mark-previous-like-this)
              ("C-c c ." . 'mc/mark-all-like-this)))
#+END_SRC

** Markdown
#+begin_src emacs-lisp
(use-package markdown-mode
  :ensure t
  :commands (markdown-mode gfm-mode)
  :mode (("README\\.md\\'" . gfm-mode)
         ("\\.md\\'" . markdown-mode)
         ("\\.markdown\\'" . markdown-mode))
  :init (setq markdown-command "multimarkdown"))
#+end_src

* Treesitter
#+begin_src emacs-lisp
(use-package tree-sitter)
(use-package tree-sitter-langs)

;; enable tree-sitter for all supported major modes
(global-tree-sitter-mode)
(add-hook 'tree-sitter-after-on-hook #'tree-sitter-hl-mode)
#+end_src

* magit side by side diff
#+begin_src emacs-lisp
(setq magit-ediff-dwim-show-on-hunks t)
#+end_src

* yaml
#+begin_src emacs-lisp
(use-package yaml-mode)
#+end_src

