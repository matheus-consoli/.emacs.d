* Theme
** Solaire
#+BEGIN_SRC emacs-lisp
(use-package solaire-mode
  :config
  (solaire-global-mode +1))
#+END_SRC

** Doom themes
#+BEGIN_SRC emacs-lisp
(use-package doom-themes
  :ensure t
  :custom ((doom-themes-enable-bold t)
           (doom-themes-enable-italic t)
           ;; (solaire-mode-remap-modeline nil)
           (doom-themes-treemacs-theme "doom-colors"))
  :config (progn (doom-themes-org-config)
                 (doom-themes-treemacs-config))
  ;; :init (solaire-mode-swap-bg)
  :preface (defvar region-fg nil))
#+END_SRC

** Kaolin Themes
#+BEGIN_SRC emacs-lisp
(use-package kaolin-themes
  :ensure t
  :config (kaolin-treemacs-theme))
#+END_SRC

** Load theme
#+BEGIN_SRC emacs-lisp
(load-theme 'doom-dracula
            :no-confirm)
(setq
 ;; distinct background for fringe and line numbers
 kaolin-themes-distinct-fringe t
 ;; enable italic style in comments
 kaolin-themes-italic-comments t
 ;; display colered hi-line instead of monochrome
 kaolin-themes-hi-line-colored t
 ;; distinct colors for company popup scrollbar
 kaolin-themes-distinct-company-scrollbar t
 ;; modeline border
 kaolin-themes-modeline-border t
 ;; distinct #+TITLE, ...
 kaolin-themes-distinct-metakeys t
 ;; distinct colors for company popup scrollbar
 kaolin-themes-distinct-company-scrollbar t)
#+END_SRC
* Font & icons
** test
   #+begin_src emacs-lisp
;; (use-package composite
;;   :defer t
;;   :init
;;   (defvar composition-ligature-table (make-char-table nil))
;;   :hook
;;   (((prog-mode conf-mode nxml-mode markdown-mode help-mode)
;;     . (lambda () (setq-local composition-function-table composition-ligature-table))))
;;   :config
;;   ;; support ligatures, some toned down to prevent hang
;;   (when (version<= "27.0" emacs-version)
;;     (let ((alist
;;            '((33 . ".\\(?:\\(==\\|[!=]\\)[!=]?\\)")
;;              (35 . ".\\(?:\\(###?\\|_(\\|[(:=?[_{]\\)[#(:=?[_{]?\\)")
;;              (36 . ".\\(?:\\(>\\)>?\\)")
;;              (37 . ".\\(?:\\(%\\)%?\\)")
;;              (38 . ".\\(?:\\(&\\)&?\\)")
;;              (42 . ".\\(?:\\(\\*\\*\\|[*>]\\)[*>]?\\)")
;;              ;; (42 . ".\\(?:\\(\\*\\*\\|[*/>]\\).?\\)")
;;              (43 . ".\\(?:\\([>]\\)>?\\)")
;;              ;; (43 . ".\\(?:\\(\\+\\+\\|[+>]\\).?\\)")
;;              (45 . ".\\(?:\\(-[->]\\|<<\\|>>\\|[-<>|~]\\)[-<>|~]?\\)")
;;              ;; (46 . ".\\(?:\\(\\.[.<]\\|[-.=]\\)[-.<=]?\\)")
;;              (46 . ".\\(?:\\(\\.<\\|[-=]\\)[-<=]?\\)")
;;              (47 . ".\\(?:\\(//\\|==\\|[=>]\\)[/=>]?\\)")
;;              ;; (47 . ".\\(?:\\(//\\|==\\|[*/=>]\\).?\\)")
;;              (48 . ".\\(?:\\(x[a-fA-F0-9]\\).?\\)")
;;              (58 . ".\\(?:\\(::\\|[:<=>]\\)[:<=>]?\\)")
;;              (59 . ".\\(?:\\(;\\);?\\)")
;;              (60 . ".\\(?:\\(!--\\|\\$>\\|\\*>\\|\\+>\\|-[-<>|]\\|/>\\|<[-<=]\\|=[<>|]\\|==>?\\||>\\||||?\\|~[>~]\\|[$*+/:<=>|~-]\\)[$*+/:<=>|~-]?\\)")
;;              (61 . ".\\(?:\\(!=\\|/=\\|:=\\|<<\\|=[=>]\\|>>\\|[=>]\\)[=<>]?\\)")
;;              (62 . ".\\(?:\\(->\\|=>\\|>[-=>]\\|[-:=>]\\)[-:=>]?\\)")
;;              (63 . ".\\(?:\\([.:=?]\\)[.:=?]?\\)")
;;              (91 . ".\\(?:\\(|\\)[]|]?\\)")
;;              ;; (92 . ".\\(?:\\([\\n]\\)[\\]?\\)")
;;              (94 . ".\\(?:\\(=\\)=?\\)")
;;              (95 . ".\\(?:\\(|_\\|[_]\\)_?\\)")
;;              (119 . ".\\(?:\\(ww\\)w?\\)")
;;              (123 . ".\\(?:\\(|\\)[|}]?\\)")
;;              (124 . ".\\(?:\\(->\\|=>\\||[-=>]\\||||*>\\|[]=>|}-]\\).?\\)")
;;              (126 . ".\\(?:\\(~>\\|[-=>@~]\\)[-=>@~]?\\)"))))
;;       (dolist (char-regexp alist)
;;         (set-char-table-range composition-ligature-table (car char-regexp)
;;                               `([,(cdr char-regexp) 0 font-shape-gstring]))))
;;     (set-char-table-parent composition-ligature-table composition-function-table))
;;   )
   #+end_src
** Set font
#+BEGIN_SRC emacs-lisp
(add-to-list 'default-frame-alist '(font . "Cascadia Mono-13"))
(set-face-attribute 'default t :font "Cascadia Mono")
(global-auto-composition-mode t)

;; https://github.com/luksamuk/emacs-org-dotfiles#fonts
(defun my-adjoin-to-list-or-symbol (element list-or-symbol)
  (let ((list (if (not (listp list-or-symbol))
                  (list list-or-symbol)
                list-or-symbol)))
    (require 'cl-lib)
    (cl-adjoin element list)))
;; Before, it was an (eval-after-load "org"
(add-hook 'org-mode-hook
          (lambda ()
            (mapc (lambda (face)
                    (set-face-attribute
                     face nil
                     :inherit
                     (my-adjoin-to-list-or-symbol
                      'fixed-pitch
                      (face-attribute face :inherit))))
             (list 'org-code 'org-block 'org-table))))
#+END_SRC
** teste
   #+begin_src emacs-lisp
(when (version<= "27.0" emacs-version)
  (defvar composition-ligature-table (make-char-table nil))
  (let ((alist
         '((33 . ".\\(?:\\(==\\|[!=]\\)[!=]?\\)")
           (35 . ".\\(?:\\(###?\\|_(\\|[(:=?[_{]\\)[#(:=?[_{]?\\)")
           (36 . ".\\(?:\\(>\\)>?\\)")
           (37 . ".\\(?:\\(%\\)%?\\)")
           (38 . ".\\(?:\\(&\\)&?\\)")
           (42 . ".\\(?:\\(\\*\\*\\|[*>]\\)[*>]?\\)")
           ;; (42 . ".\\(?:\\(\\*\\*\\|[*/>]\\).?\\)")
           (43 . ".\\(?:\\([>]\\)>?\\)")
           ;; (43 . ".\\(?:\\(\\+\\+\\|[+>]\\).?\\)")
           (45 . ".\\(?:\\(-[->]\\|<<\\|>>\\|[-<>|~]\\)[-<>|~]?\\)")
           ;; (46 . ".\\(?:\\(\\.[.<]\\|[-.=]\\)[-.<=]?\\)")
           (46 . ".\\(?:\\(\\.<\\|[-=]\\)[-<=]?\\)")
           (47 . ".\\(?:\\(//\\|==\\|[=>]\\)[/=>]?\\)")
           ;; (47 . ".\\(?:\\(//\\|==\\|[*/=>]\\).?\\)")
           (48 . ".\\(?:\\(x[a-fA-F0-9]\\).?\\)")
           (58 . ".\\(?:\\(::\\|[:<=>]\\)[:<=>]?\\)")
           (59 . ".\\(?:\\(;\\);?\\)")
           (60 . ".\\(?:\\(!--\\|\\$>\\|\\*>\\|\\+>\\|-[-<>|]\\|/>\\|<[-<=]\\|=[<>|]\\|==>?\\||>\\||||?\\|~[>~]\\|[$*+/:<=>|~-]\\)[$*+/:<=>|~-]?\\)")
           (61 . ".\\(?:\\(!=\\|/=\\|:=\\|<<\\|=[=>]\\|>>\\|[=>]\\)[=<>]?\\)")
           (62 . ".\\(?:\\(->\\|=>\\|>[-=>]\\|[-:=>]\\)[-:=>]?\\)")
           (63 . ".\\(?:\\([.:=?]\\)[.:=?]?\\)")
           (91 . ".\\(?:\\(|\\)[]|]?\\)")
           ;; (92 . ".\\(?:\\([\\n]\\)[\\]?\\)")
           (94 . ".\\(?:\\(=\\)=?\\)")
           (95 . ".\\(?:\\(|_\\|[_]\\)_?\\)")
           (119 . ".\\(?:\\(ww\\)w?\\)")
           (123 . ".\\(?:\\(|\\)[|}]?\\)")
           (124 . ".\\(?:\\(->\\|=>\\||[-=>]\\||||*>\\|[]=>|}-]\\).?\\)")
           (126 . ".\\(?:\\(~>\\|[-=>@~]\\)[-=>@~]?\\)"))))
    (dolist (char-regexp alist)
      (set-char-table-range composition-ligature-table (car char-regexp)
                            `([,(cdr char-regexp) 0 font-shape-gstring]))))
  (set-char-table-parent composition-ligature-table composition-function-table)
  (add-hook 'prog-mode-hook '(lambda () (setq-local composition-function-table composition-ligature-table))))
   #+end_src

** Italic comments
#+begin_src emacs-lisp
(custom-set-faces
 '(font-lock-comment-face ((t (:slant italic)))))
#+end_src

** All the icons
#+BEGIN_SRC emacs-lisp
(use-package all-the-icons
  :ensure t)
#+END_SRC

** Pretty symbols
#+BEGIN_SRC emacs-lisp
(when window-system
  (add-hook 'prog-mode-hook 'prettify-symbols-mode))
#+END_SRC
* Layout
** No scroll, menu and tool bar 
#+BEGIN_SRC emacs-lisp
(tool-bar-mode -1)
(menu-bar-mode -1)
(scroll-bar-mode -1)
#+END_SRC

** Cursor type
#+begin_src emacs-lisp
(setq-default cursor-type 'bar) ; 'hollow
#+end_src

** Line numbers
*** Hook
#+BEGIN_SRC emacs-lisp
(add-hook 'prog-mode-hook 'display-line-numbers-mode)
#+END_SRC

*** Line format
#+BEGIN_SRC emacs-lisp
(fringe-mode '(10 . 5))

;; (setq linum-format " %5d ")

;; https://stackoverflow.com/questions/19540211/configure-linum-mode-to-not-show-whitespace-symbols-in-whitespace-mode
;; (defvar my-linum-format-string "%4d ")

;; (add-hook 'linum-before-numbering-hook 'my-linum-get-format-string)

;; (defun my-linum-get-format-string ()
;;   (let* ((width (length (number-to-string
;;                          (count-lines (point-min) (point-max)))))
;;          (format (concat "%" (number-to-string width) "d")))
;;     (setq my-linum-format-string format)))

;; (setq linum-format 'my-linum-format)

;; (defun my-linum-format (line-number)
;;   (propertize (format my-linum-format-string line-number) 'face 'linum))
#+END_SRC
** Highlight line
#+BEGIN_SRC emacs-lisp
(global-hl-line-mode 1)
;; (use-package hlinum
;;   :ensure t
;;   :init (global-hl-line-mode)
;;   :config (set-face-background 'hl-line "#1E2029"))
#+END_SRC

* Parens
** Show matchs
#+BEGIN_SRC emacs-lisp
(require 'paren)
;; (set-face-foreground 'show-paren-match "#00BFFF")
(set-face-foreground 'show-paren-match "#FF3377")
(set-face-background 'show-paren-match (face-background 'default))
(set-face-attribute 'show-paren-match nil :weight 'extra-bold)
(show-paren-mode 1)
#+END_SRC

** Rainbow delimiters
#+BEGIN_SRC emacs-lisp
(use-package rainbow-delimiters
  :ensure t
  :hook (prog-mode . rainbow-delimiters-mode))
#+END_SRC

* Modeline
** Doom modeline
#+BEGIN_SRC emacs-lisp
(use-package doom-modeline
  :ensure t
  :custom (doom-modeline-height 40)
  (doom-modeline-hud t)
  ;; :custom ((doom-modeline-bar-width 5)
  ;;          (doom-modeline-icon t)
  ;;          (doom-modeline-project-detection 'projectile)
  ;;          (doom-modeline-major-mode-color-icon t)
  ;;          (doom-modeline-buffer-file-state 'relative-from-project)
  ;;          (doom-modeline-major-mode-icon t)
  ;;          (doom-modeline-buffer-state-icon t)
  ;;          (doom-modeline-buffer-modification-icon t)
  ;;          (doom-modeline-enable-word-count t)
  ;;          (doom-modeline-buffer-encoding t)
  ;;          (doom-modeline-indent-info t)
  ;;          (doom-modeline-lsp t)
  ;;          (doom-modeline-env-version t)
  ;;          (doom-modeline-height 1)
  ;;          (doom-modeline-env-python-executable "ipython")
  ;;          (doom-modeline-env-rust-executable "rustc")
  ;;          (doom-modeline-env-elixir-executable "iex"))
  :hook (after-init . doom-modeline-mode))
#+END_SRC

** Nyan cat
#+BEGIN_SRC emacs-lisp
;; (use-package nyan-mode
;;   :ensure t
;;   :custom (nyan-animate-nyancat t)
;;   (nyan-wavy-trail t)
;;   (mode-line-format (list
;;                      '(:eval (list (nyan-create)))))
;;   :init (nyan-mode))
#+END_SRC

** Clock
#+BEGIN_SRC emacs-lisp
(setq display-time-24hr-format t)
(setq display-time-format "%H:%M")
(display-time-mode 1)
#+END_SRC

* Diminish
#+BEGIN_SRC emacs-lisp
;; (use-package diminish
;;   :ensure t)
#+END_SRC

* Git
** Fringe Helper
#+BEGIN_SRC emacs-lisp
(use-package fringe-helper
  :ensure t)
#+END_SRC

** Git Gutter
#+BEGIN_SRC emacs-lisp
(use-package git-gutter-fringe+
  :ensure t)
(setq git-gutter-fr+-side 'right-fringe) ;; left side is for flycheck
(set-face-foreground 'git-gutter-fr+-modified "#e77818")
(set-face-background 'git-gutter-fr+-modified "#e77818")
(set-face-foreground 'git-gutter-fr+-deleted "#a20417")
(set-face-background 'git-gutter-fr+-deleted "#a20417")
(set-face-foreground 'git-gutter-fr+-added "#007144")
(set-face-background 'git-gutter-fr+-added "#007144")
(setq-default right-fringe-width 10)
(global-git-gutter+-mode)
#+END_SRC
