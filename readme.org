#+PROPERTY: header-args:emacs-lisp :lexical t

* Completion system
** Vertico
   #+begin_src emacs-lisp
     (use-package vertico
       :config (setq vertico-cycle t)
       :init (vertico-mode))

     (use-package savehist
       :init (savehist-mode))

     ;; A few more useful configurations...
     (use-package emacs
       :init
       ;; Add prompt indicator to `completing-read-multiple'.
       ;; Alternatively try `consult-completing-read-multiple'.
       (defun crm-indicator (args)
         (cons (concat "[CRM] " (car args)) (cdr args)))
       (advice-add #'completing-read-multiple :filter-args #'crm-indicator)

       ;; Do not allow the cursor in the minibuffer prompt
       (setq minibuffer-prompt-properties
             '(read-only t cursor-intangible t face minibuffer-prompt))
       (add-hook 'minibuffer-setup-hook #'cursor-intangible-mode)

       ;; Enable recursive minibuffers
       (setq enable-recursive-minibuffers t))
   #+end_src
** Corfu
   #+begin_src emacs-lisp
     (use-package corfu
       :init
       (global-corfu-mode)
       (corfu-history-mode 1)
       (corfu-popupinfo-mode 1)

       :config
       (add-to-list 'savehist-additional-variables 'corfu-history)
       (setq
        corfu-cycle t
        corfu-scroll-margin 2
        corfu-preselect 'first
        corfu-preview-current t
        corfu-quit-no-match 'separator
        corfu-quit-at-boundary nil
        corfu-separator ?\s

        corfu-auto t
        corfu-auto-delay 0.4
        corfu-auto-prefix 0
        corfu-popupinfo-delay '(1.30 . 1.50))
       :bind
       (:map corfu-map
             ("M-q" . corfu-quick-complete)
             ("C-i" . corfu-quick-insert)))
   #+end_src
*** icons for corfu
    #+begin_src emacs-lisp
      (use-package nerd-icons-corfu
        :config
        (add-to-list 'corfu-margin-formatters #'nerd-icons-corfu-formatter))
    #+end_src
*** corfu in the minibuffer
    #+begin_src emacs-lisp
      (defun corfu-enable-in-minibuffer ()
        "Enable Corfu in the minibuffer."
        (when (local-variable-p 'completion-at-point-functions)
          ;; (setq-local corfu-auto nil) ;; Enable/disable auto completion
          (setq-local corfu-echo-delay nil ;; Disable automatic echo and popup
                      corfu-popupinfo-delay nil)
          (corfu-mode 1)))
      (add-hook 'minibuffer-setup-hook #'corfu-enable-in-minibuffer)
    #+end_src
** Orderless
   #+begin_src emacs-lisp
     (use-package orderless
       :init
       (setq completion-styles '(orderless partial-completion basic)
             completion-category-defaults nil
             completion-category-overrides nil)) ;; '((file (styles basic partial-completion)))))
   #+end_src
** dabbrev
   #+begin_src emacs-lisp
     (use-package dabbrev
       :bind (("M-/" . dabbrev-completion)
              ("C-M-/" . dabbrev-expand))
       :config
       (add-to-list 'dabbrev-ignored-buffer-regexps "\\` ")
       (add-to-list 'dabbrev-ignored-buffer-modes 'doc-view-mode)
       (add-to-list 'dabbrev-ignored-buffer-modes 'pdf-view-mode)
       (add-to-list 'dabbrev-ignored-buffer-modes 'tags-table-mode))
   #+end_src
** cape
   #+begin_src emacs-lisp
     (use-package cape
       :bind ("M-p" . cape-prefix-map)
       :init
       (add-hook 'completion-at-point-functions #'cape-dabbrev)
       (add-hook 'completion-at-point-functions #'cape-file)
       (add-hook 'completion-at-point-functions #'cape-elisp-block))
   #+end_src
** Marginalia
   #+begin_src emacs-lisp
     (use-package marginalia
       :after vertico
       :config
       (setq marginalia-annotators '(marginalia-annotators-heavy marginalia-annotators-light nil))
       :init (marginalia-mode))
   #+end_src

** Which-key
   #+begin_src emacs-lisp
     (use-package which-key
       :config
       (setq which-key-idle-delay 0.25
             which-key-max-description-length 45
             which-key-idle-secondary-delay 0.05
             which-key-show-remaining-keys t)
       :init (which-key-mode)
       :bind ("C-c c w" . which-key-show-major-mode))
   #+end_src

** Avy
   #+begin_src emacs-lisp
     (use-package avy
       :bind
       ("C-:" . avy-goto-char-timer)
       ("C-c a l" . avy-goto-line)
       ("C-c a w" . avy-goto-subword-0)
       ("C-c a s" . avy-goto-symbol-1))
   #+end_src

*** using treesit with avy
    #+begin_src emacs-lisp
      (use-package treesit-jump
        :straight (:host github :repo "dmille56/treesit-jump" :files ("*.el" "treesit-queries"))
        :bind
        ("C-, ," . treesit-jump-jump)
        ("C-, j" . treesit-jump-jump)
        ("C-, s" . treesit-jump-select)
        ("C-, d" . treesit-jump-delete)
        ("C-, p" . treesit-jump-parent-jump)
        ("C-, t" . treesit-jump-transient))
    #+end_src

** Embark
   #+begin_src emacs-lisp
     (use-package embark
       :ensure t
       :bind
       (("C-." . embark-act)         ;; pick some comfortable binding
        ("C-;" . embark-dwim)        ;; good alternative: M-.
        ("C-h B" . embark-bindings)) ;; alternative for `describe-bindings'
       :init
       ;; Optionally replace the key help with a completing-read interface
       (setq prefix-help-command #'embark-prefix-help-command)
       :config
       ;; Hide the mode line of the Embark live/completions buffers
       (add-to-list 'display-buffer-alist
                    '("\\`\\*Embark Collect \\(Live\\|Completions\\)\\*"
                      nil
                      (window-parameters (mode-line-format . none)))))
   #+end_src

*** Embark consult
#+begin_src emacs-lisp
(use-package embark-consult
  :ensure t
  :after (embark consult)
  :demand t ; only necessary if you have the hook below
  ;; if you want to have consult previews as you move around an
  ;; auto-updating embark collect buffer
  :hook (embark-collect-mode . consult-preview-at-point-mode))
#+end_src

*** Embark use whick-key like a key menu prompt
    #+begin_src emacs-lisp
      (defun embark-which-key-indicator ()
        "An embark indicator that displays keymaps using which-key.
      The which-key help message will show the type and value of the
      current target followed by an ellipsis if there are further
      targets."
        (lambda (&optional keymap targets prefix)
          (if (null keymap)
              (which-key--hide-popup-ignore-command)
            (which-key--show-keymap
             (if (eq (plist-get (car targets) :type) 'embark-become)
                 "Become"
               (format "Act on %s '%s'%s"
                       (plist-get (car targets) :type)
                       (embark--truncate-target (plist-get (car targets) :target))
                       (if (cdr targets) "…" "")))
             (if prefix
                 (pcase (lookup-key keymap prefix 'accept-default)
                   ((and (pred keymapp) km) km)
                   (_ (key-binding prefix 'accept-default)))
               keymap)
             nil nil t (lambda (binding)
                         (not (string-suffix-p "-argument" (cdr binding))))))))

      (setq embark-indicators
            '(embark-which-key-indicator
              embark-highlight-indicator
              embark-isearch-highlight-indicator))

      (defun embark-hide-which-key-indicator (fn &rest args)
        "Hide the which-key indicator immediately when using the completing-read prompter."
        (which-key--hide-popup-ignore-command)
        (let ((embark-indicators
               (remq #'embark-which-key-indicator embark-indicators)))
          (apply fn args)))

      (advice-add #'embark-completing-read-prompter
                  :around #'embark-hide-which-key-indicator)
    #+end_src
** Projectile
   #+begin_src emacs-lisp
     (use-package projectile
       :ensure t
       :init (projectile-mode +1)
       :config (push "~/.cargo/registry/src" projectile-globally-ignored-directories)
       :bind ("C-c p" . projectile-command-map))
   #+end_src
** Yasnippet
   #+begin_src emacs-lisp
     (use-package yasnippet
       :config (yas-reload-all)
       (use-package yasnippet-snippets)
       :hook (prog-mode . yas-minor-mode))
   #+end_src
** Language Server Protocol
*** LSP mode
    #+begin_src emacs-lisp
      (use-package lsp-mode
        :config
        (setq
         lsp-completion-provider :none ;; using Corfu!
         lsp-keymap-prefix "C-c l"
         lsp-eldoc-render-all nil
         eldoc-echo-area-use-multiline-p nil
         lsp-eldoc-enable-hover nil
         lsp-signature-doc-lines 0
         lsp-modeline-code-actions-mode t
         lsp-enable-folding t
         lsp-enable-indentation t
         lsp-enable-on-type-formatting t
         lsp-enable-snippet t
         lsp-headerline-breadcrumb-icons-enable t
         lsp-headerline-breadcrumb-segments '(file symbols)
         lsp-idle-delay 0.0
         lsp-lens-enable t
         lsp-inlay-hint-enable nil ;; disable by default, F4 to enable
         lsp-log-io nil
         lsp-use-plists t)
        (define-key lsp-mode-map (kbd "C-c l") lsp-command-map)
        :bind (:map lsp-mode-map
                    ("C-c l r" . lsp-rename)
                    ("C-c l a" . lsp-execute-code-action)
                    ("C-c l t" . lsp-find-type-definition)
                    ("<f4>" . lsp-inlay-hints-mode))
        :init
        (defun my/orderless-dispatch-flex-first (_pattern index _total)
          (and (eq index 0) 'orderless-flex))

        (defun my/lsp-mode-setup-completion ()
          (setf (alist-get 'styles (alist-get 'lsp-capf completion-category-defaults))
                '(orderless))
          ;; Optionally configure the first word as flex filtered.
          (add-hook 'orderless-style-dispatchers #'my/orderless-dispatch-flex-first nil 'local)
          ;; Optionally configure the cape-capf-buster.
          (setq-local completion-at-point-functions (list (cape-capf-buster #'lsp-completion-at-point))))

        :hook (lsp-completion-mode . my/lsp-mode-setup-completion)
        :commands lsp)
    #+end_src
*** LSP UI
    #+begin_src emacs-lisp
      (use-package lsp-ui
        :bind
        (:map lsp-ui-mode-map
              ("C-M-q". lsp-ui-doc-unfocus-frame)
              ("M-." . lsp-ui-peek-find-definitions)
              ("M-?" . lsp-ui-peek-find-references)
              ("M-<right>" . lsp-ui-peek-jump-backward)
              ("M-<left>" . lsp-ui-peek-jump-forward)
              ("C-c l i" . lsp-ui-imenu)
              ("C-c l d" . lsp-ui-doc-glance)
              ("C-c l s" . consult-lsp-symbols)))

      (setq lsp-ui-doc-enable t
            lsp-ui-doc-position 'top
            lsp-ui-doc-header t
            lsp-ui-doc-frame-mode nil
            lsp-ui-doc-delay 0.5
            lsp-ui-doc-show-with-cursor t
            lsp-ui-doc-show-with-mouse nil

            lsp-ui-sideline-show-code-actions nil
            lsp-ui-sideline-delay 2

            lsp-ui-peek-enable t
            lsp-ui-peek-show-directory t

            lsp-completion-show-kind t
            lsp-completion-show-detail t)
    #+end_src
** DAP - Debug Adapter Protocol
   #+begin_src emacs-lisp
     (use-package dap-mode
       :config
       (require 'dap-lldb)
       (require 'dap-gdb-lldb)
       (dap-register-debug-template "Rust::GDB Run Configuration"
                                    (list :type "gdb"
                                          :request "launch"
                                          :name "GDB::Run"
                                          :gdbpath "rust-gdb"
                                          :target nil
                                          :cwd nil))

       (dap-register-debug-template "Rust::LLDB Run Configuration"
                                    (list :type "lldb"
                                          :request "launch"
                                          :name "LLDB::Run"
                                          :gdbpath "rust-lldb"
                                          :target nil
                                          :cwd nil))
       :bind ("<f5>" . dap-breakpoint-toggle))
   #+end_src
** Linter
*** Flycheck
#+begin_src emacs-lisp
(use-package flycheck
  :config
  (add-to-list 'display-buffer-alist
               `(,(rx bos "*Flycheck errors*" eos)
                 (display-buffer-reuse-window
                  display-buffer-in-side-window)
                 (side            . bottom)
                 (reusable-frames . visible)
                 (window-height   . 0.33)))
  :init (global-flycheck-mode))
#+end_src

** Consult and integrations
*** Consult
    #+begin_src emacs-lisp
      (use-package consult
        ;; Replace bindings. Lazily loaded due by `use-package'.
        :bind (;; C-c bindings (mode-specific-map)
               ("C-c h" . consult-history)
               ("C-c m" . consult-mode-command)
               ;; C-x bindings (ctl-x-map)
               ("C-x M-:" . consult-complex-command)     ;; orig. repeat-complex-command
               ("C-x b" . consult-buffer)                ;; orig. switch-to-buffer
               ;; Custom M-# bindings for fast register access
               ("M-#" . consult-register-load)
               ("M-'" . consult-register-store)          ;; orig. abbrev-prefix-mark (unrelated)
               ("C-M-#" . consult-register)
               ;; Other custom bindings
               ("M-y" . consult-yank-pop)                ;; orig. yank-pop
               ;; M-g bindings (goto-map)
               ("M-g f" . consult-flycheck)               ;; Alternative: consult-flycheck
               ("M-g g" . consult-goto-line)             ;; orig. goto-line
               ("M-g M-g" . consult-goto-line)           ;; orig. goto-line
               ("M-g o" . consult-outline)               ;; Alternative: consult-org-heading
               ("M-g m" . consult-mark)
               ("M-g k" . consult-global-mark)
               ("M-g i" . consult-imenu)
               ("M-g I" . consult-imenu-multi)
               ;; M-s bindings (search-map)
               ("M-s f" . consult-find)
               ("M-s F" . consult-locate)
               ("M-s r" . consult-ripgrep)
               ("M-s l" . consult-line)
               ("M-s L" . consult-line-multi)
               ("M-s m" . consult-multi-occur)
               ("M-s k" . consult-keep-lines)
               ("M-s u" . consult-focus-lines)
               ;; Isearch integration
               ("M-s e" . consult-isearch-history)
               :map isearch-mode-map
               ("M-e" . consult-isearch-history)         ;; orig. isearch-edit-string
               ("M-s e" . consult-isearch-history)       ;; orig. isearch-edit-string
               ("M-s l" . consult-line)                  ;; needed by consult-line to detect isearch
               ("M-s L" . consult-line-multi))           ;; needed by consult-line to detect isearch

        ;; Enable automatic preview at point in the *Completions* buffer. This is
        ;; relevant when you use the default completion UI. You may want to also
        ;; enable `consult-preview-at-point-mode` in Embark Collect buffers.
        :hook (completion-list-mode . consult-preview-at-point-mode)

        ;; The :init configuration is always executed (Not lazy)
        :init

        ;; Optionally configure the register formatting. This improves the register
        ;; preview for `consult-register', `consult-register-load',
        ;; `consult-register-store' and the Emacs built-ins.
        (setq register-preview-delay 0
              register-preview-function #'consult-register-format)

        ;; Optionally tweak the register preview window.
        ;; This adds thin lines, sorting and hides the mode line of the window.
        (advice-add #'register-preview :override #'consult-register-window)

        ;; Optionally replace `completing-read-multiple' with an enhanced version.
        (advice-add #'completing-read-multiple :override #'consult-completing-read-multiple)

        ;; Use Consult to select xref locations with preview
        (setq xref-show-xrefs-function #'consult-xref
              xref-show-definitions-function #'consult-xref)

        ;; Use `consult-completion-in-region' if Vertico is enabled.
        ;; Otherwise use the default `completion--in-region' function.
        (setq completion-in-region-function
              (lambda (&rest args)
                (apply (if vertico-mode
                           #'consult-completion-in-region
                         #'completion--in-region)
                       args)))

        ;; Configure other variables and modes in the :config section,
        ;; after lazily loading the package.
        :config
        ;; Preview immediately theme on M-., on up/down after 0.5s, on any other key after 1s
        (consult-customize consult-theme
                         :preview-key
                         '("M-."
                           :debounce 0.5 "<up>" "<down>"
                           :debounce 1 any))

        ;; Optionally make narrowing help available in the minibuffer.
        ;; You may want to use `embark-prefix-help-command' or which-key instead.
        ;; (define-key consult-narrow-map (vconcat consult-narrow-key "?") #'consult-narrow-help)

        ;; Configure S-up/S-down preview keys
        (define-key vertico-map [S-up] #'vertico-previous)
        (define-key vertico-map [S-down] #'vertico-next)
        (consult-customize consult-recent-file :preview-key '([S-up] [S-down]))
        ;; Optionally configure a function which returns the project root directory.
        ;; There are multiple reasonable alternatives to chose from.
          ;;;; 1. project.el (project-roots)
        (setq consult-project-root-function
              (lambda ()
                (when-let (project (project-current))
                  (car (project-roots project))))))
    #+end_src

*** Consult flycheck
    #+begin_src emacs-lisp
      (use-package consult-flycheck
        :after (flycheck consult))
    #+end_src

*** Consult yasnippet
    #+begin_src emacs-lisp
      (use-package consult-yasnippet
        :after (yasnippet consult))
    #+end_src

*** Consult LSP
    #+begin_src emacs-lisp
      (use-package consult-lsp
        :after (consult marginalia lsp-mode)
        :bind ("C-c l e" . consult-lsp-diagnostics))
    #+end_src

*** Consult org-roam
    #+begin_src emacs-lisp
      (use-package consult-org-roam
        :ensure t
        :after org-roam
        :init
        (require 'consult-org-roam)
        ;; Activate the minor mode
        (consult-org-roam-mode 1)
        :custom
        ;; use `ripgrep` for searching with `consult-org-roam-search`
        (consult-org-roam-grep-func #'consult-ripgrep)
        ;; custom narrow key for `consult-buffer`
        (consult-org-roam-narrow-key ?r)
        ;; display org-roam buffers right after non-org-roam buffers
        ;; in consult-buffer (and not down at the bottom)
        (consult-org-roam-buffer-after-buffers t)
        :config
        ;; eventually suppress previewing for certain functions
        (consult-customize
         consult-org-roam-forward-links
         :preview-key "M-.")
        :bind
        ;; define some convenient keybindings as an addition
        ("C-c n e" . consult-org-roam-file-find)
        ("C-c n b" . consult-org-roam-backlinks)
        ("C-c n B" . consult-org-roam-backlinks-recursive)
        ("C-c n l" . consult-org-roam-forward-links)
        ("C-c n r" . consult-org-roam-search))
        #+end_src
* Programming
** Utils
*** treesit-auto
    #+begin_src emacs-lisp
      (use-package treesit-auto
        :custom
        (treesit-auto-install 'prompt)
        :config
        (treesit-auto-add-to-auto-mode-alist 'all)
        (global-treesit-auto-mode))
    #+end_src
*** Parens
**** Smartparens
     #+begin_src emacs-lisp
       (use-package smartparens
         :bind ("C-M-f" . 'sp-forward-sexp)
         ("C-M-b" . 'sp-backward-sexp)
         :config
         (require 'smartparens-config)
         (smartparens-global-mode)
         ;; easy <'lifetime>
         (sp-with-modes 'rust-ts-mode
           (sp-local-pair "<" ">")
           (sp-local-pair "'" nil :actions nil))
         ;; easy ~code~
         (sp-with-modes 'org-mode
           (sp-local-pair "~" "~")
           (sp-local-pair "=" "="))
         :init (smartparens-strict-mode t))
     #+end_src
***** close parens in new line
      #+begin_src emacs-lisp
        ;; (sp-pair "{" nil :post-handlers '(("||\n[i]" "RET")))
        ;; (sp-pair "(" nil :post-handlers '(("||\n[i]" "RET")))
        ;; (sp-pair "[" nil :post-handlers '(("||\n[i]" "RET")))
      #+end_src

**** Show matches
     #+begin_src emacs-lisp
       (show-paren-mode 1)
       (setq show-paren-style 'parenthesis)
       (set-face-attribute 'show-paren-match nil :foreground "#FF3377" :weight 'regular :inherit t)
     #+end_src
**** Rainbow delimiters
     #+begin_src emacs-lisp
       (use-package rainbow-delimiters
         :hook (prog-mode . rainbow-delimiters-mode))
     #+end_src
*** Git
**** Magit
     #+begin_src emacs-lisp
       (use-package magit
         :config (setq magit-ediff-dwim-show-on-hunks t))
     #+end_src

***** Magit TODOs
      #+begin_src emacs-lisp
        (use-package magit-todos
          :config (magit-todos-mode t))
      #+end_src
***** magit delta
      #+begin_src emacs-lisp
        (use-package magit-delta
          :after magit
          :commands magit-delta-mode
          :hook (magit-mode . magit-delta-mode))
      #+end_src
**** Fringe Helper
     #+BEGIN_SRC emacs-lisp
       (use-package fringe-helper
         :ensure t)
     #+END_SRC

**** git gutter
     #+begin_src emacs-lisp
       (use-package git-gutter
         :config (global-git-gutter-mode t)
         :custom
         (git-gutter:update-interval 0.02))

       (use-package git-gutter-fringe
         :custom
         (git-gutter-fr:side 'right-fringe))
       (define-fringe-bitmap 'git-gutter-fr:added [224] nil nil '(center repeated))
       (define-fringe-bitmap 'git-gutter-fr:modified [224] nil nil '(center repeated))
       (define-fringe-bitmap 'git-gutter-fr:deleted [128 192 224 240] nil nil 'bottom)
     #+end_src

**** blame
     #+begin_src emacs-lisp
       ;; make the blamer font slightly smaller than the used font size
       (defvar blamer-face-height
         (if window-system
             (- (face-attribute 'default :height) 10)
           120))

       (use-package blamer
         :defer 20
         :bind (("C-c i" . blamer-show-posframe-commit-info))
         :custom
         (blamer-datetime-formatter ", %s ")
         (blamer-author-formatter " %s") ;; 
         (blamer-commit-formatter "")
         (blamer-idle-time 1)
         (blamer-smart-background-p t)
         (blamer-min-offset 5)
         (blamer-type 'visual) ;; only about one line
         (blamer-prettify-time-p t)
         (blamer-max-commit-message-length 30)
         (blamer-show-avatar-p t)
         :custom-face
         (blamer-face ((t :height ,blamer-face-height
                          :italic nil)))
         :config (global-blamer-mode 1))
     #+end_src
**** forge
     #+begin_src emacs-lisp
       (use-package forge
         :after magit)
     #+end_src
**** github notifications
     #+begin_src emacs-lisp
       (use-package gh-notify)
     #+end_src
*** Region Expansion
    #+begin_src emacs-lisp
      (use-package expand-region
        :bind ("C-c e =" . 'er/expand-region)
        ("C-c e p" . 'er/mark-inside-pairs)
        ("C-c e P" . 'er/mark-outside-pairs)
        ("C-c e q" . 'er/mark-inside-quotes)
        ("C-c e Q" . 'er/mark-outside-quotes)
        ("C-c e m" . 'er/mark-method-call)
        ("C-c e c" . 'er/mark-comment)
        ("C-c e -" . 'er/contract-region))
    #+end_src
*** multiple-cursors
    #+begin_src emacs-lisp
      (use-package multiple-cursors
        :config (define-key mc/keymap (kbd "RET") nil)
        :init
        (defvar-keymap me/multiple-cursors-map
               :repeat t
               "." #'mc/mark-next-like-this-symbol
               ">" #'mc/skip-to-next-like-this
               "," #'mc/mark-previous-like-this-symbol
               "<" #'mc/skip-to-previous-like-this)
        :bind-keymap ("C->" . me/multiple-cursors-map))
    #+end_src
*** ts-movement
    #+begin_src emacs-lisp
      (use-package ts-movement
        :straight (ts-movement :type git :host github :repo "haritkapadia/ts-movement")
        :ensure multiple-cursors
        :init
        (defvar-keymap me/ts-movement-map
                     :repeat t
                     "d" #'tsm/delete-overlay-at-point
                     "D" #'tsm/clear-overlays-of-type
                     "b" #'tsm/node-prev
                     "C-b" #'tsm/backward-overlay
                     "C-f" #'tsm/forward-overlay
                     "f" #'tsm/node-next
                     "p" #'tsm/node-parent
                     "n" #'tsm/node-child
                     "N" #'tsm/node-children
                     "s" #'tsm/node-children-of-type
                     "a" #'tsm/node-start
                     "e" #'tsm/node-end
                     "m" #'tsm/node-mark
                     "c" #'tsm/mc/mark-all-overlays)
        :bind-keymap ("C-c ." . me/ts-movement-map)
        :hook
        (bash-ts-mode . ts-movement-mode)
        (c++-ts-mode . ts-movement-mode)
        (c-ts-mode . ts-movement-mode)
        (cmake-ts-mode . ts-movement-mode)
        (csharp-ts-mode . ts-movement-mode)
        (css-ts-mode . ts-movement-mode)
        (dockerfile-ts-mode . ts-movement-mode)
        (go-mod-ts-mode . ts-movement-mode)
        (go-ts-mode . ts-movement-mode)
        (java-ts-mode . ts-movement-mode)
        (js-ts-mode . ts-movement-mode)
        (json-ts-mode . ts-movement-mode)
        (python-ts-mode . ts-movement-mode)
        (ruby-ts-mode . ts-movement-mode)
        (rust-ts-mode . ts-movement-mode)
        (toml-ts-mode . ts-movement-mode)
        (tsx-ts-mode . ts-movement-mode)
        (typescript-ts-mode . ts-movement-mode)
        (yaml-ts-mode . ts-movement-mode))
    #+end_src
*** repeat-mode
    #+begin_src emacs-lisp
      (defun my/which-key-repeat-mode-dispatch ()
        (interactive)
        (setq this-command last-command)
        (when-let (keymap (repeat--command-property 'repeat-map))
          (which-key--create-buffer-and-show
           nil (symbol-value keymap))))

      (defun my/which-key-repeat-mode-binding ()
        (when repeat-mode
          (when-let* ((rep-map-sym (or repeat-map (repeat--command-property 'repeat-map)))
                      (keymap (and (symbolp rep-map-sym) (symbol-value rep-map-sym))))
            (set-transient-map
             (make-composed-keymap
              (let ((map (make-sparse-keymap)))
                (define-key map (kbd "C-h") #'my/which-key-repeat-mode-dispatch)
                map)
              keymap)))))

      (advice-add 'repeat-post-hook :after
                  (defun my/which-key-repeat ()
                    (when-let ((cmd (or this-command real-this-command))
                               (keymap (repeat--command-property 'repeat-map)))
                      (run-at-time
                       which-key-idle-delay nil
                       (lambda () 
                         (which-key--create-buffer-and-show
                          nil (symbol-value keymap)))))))

      (advice-add 'repeat-post-hook :after #'my/which-key-repeat-mode-binding)


      (repeat-mode t)
    #+end_src
*** symbol overlay
    #+begin_src emacs-lisp
      (use-package symbol-overlay
        :config
        (setq symbol-overlay-toggle-in-scope t)
        :bind ("M-i" . symbol-overlay-put))
    #+end_src
*** Moving lines around
    #+begin_src emacs-lisp
      (use-package drag-stuff
        :hook (prog-mode . drag-stuff-mode)
        :config (drag-stuff-define-keys))
    #+end_src
*** Auto reload files
    #+begin_src emacs-lisp
      (global-auto-revert-mode t)
    #+end_src
*** Save last cursor position
    #+begin_src emacs-lisp
      (save-place-mode 1)
    #+end_src
*** Get ansi-term
    #+begin_src emacs-lisp
      (defvar toggle-term-state nil)
      (defun toggle-term ()
        (interactive)
        (progn
          (if toggle-term-state
              (term-line-mode)
            (term-char-mode))
          (setq toggle-term-state (not toggle-term-state))))

      (use-package multi-term
        :custom (multi-term-program "/bin/zsh")
        :bind (("<f11>" . multi-term-dedicated-toggle)
               ("<f10>" . multi-term-dedicated-select)
               (:map term-mode-map
                     ("C-," . toggle-term))
               (:map term-raw-map
                     ("C-," . toggle-term))))
    #+end_src
*** subword mode
    #+begin_src emacs-lisp
      ;; CamelCase words as individual words
      (add-hook 'prog-mode-hook 'subword-mode)
    #+end_src
*** editorconfig compat
    #+begin_src emacs-lisp
      (use-package editorconfig
        :config
        (editorconfig-mode 1))
    #+end_src
*** treesitter context
    #+begin_src emacs-lisp
      (use-package treesitter-context
        :straight
        (treesitter-context-mode
         :type git
         :host github
         :repo "zbelial/treesitter-context.el"
         :files ("*.el"))
        :hook
        (rust-ts-mode . treesitter-context-mode)
        (js-ts-mode . treesitter-context-mode)
        (typescript-ts-mode . treesitter-context-mode)
        (tsx-ts-mode . treesitter-context-mode)
        :bind
        (:map treesitter-context-mode
              ("C-(" . treesitter-context-fold-toggle)
              ("C-)" . treesitter-context-focus-mode))
        :config
        (setq treesitter-context-show-context-always nil ;; only show when the outmost parent is invisible
              treesitter-context-frame-autohide-timeout 5
              treesitter-context-show-line-number nil
              treesitter-context-frame-min-height 1
              treesitter-context-border-width 5
              treesitter-context-frame-min-width 1
              treesitter-context-fold-show-fringe-marks nil
              treesitter-context-frame-font-fraction 0.85
              treesitter-context-border-color (face-attribute 'mode-line :background)
              treesitter-context-background-color (face-attribute 'default :background)))
    #+end_src
** Languages specifics
*** Rust
**** Rust mode
     #+begin_src emacs-lisp
       (use-package rust-ts-mode
            :hook (rust-ts-mode . lsp))
     #+end_src
**** Better cargo integration
     #+begin_src emacs-lisp
       (use-package cargo-transient
         :bind (:map rust-ts-mode
                     ("C-c C-c t" . cargo-transient)
                     ("C-c C-c c" . cargo-transient-check)
                     ("C-c C-c l" . cargo-transient-clippy)
                     ("C-c C-c f" . cargo-transient-clippy-fix)
                     ("C-c C-c t" . cargo-transient-clippy-test)
                     ("C-c C-c r" . cargo-transient-run)))
     #+end_src
**** LSP config
     #+begin_src emacs-lisp
       (setq lsp-rust-analyzer-lru-capacity (* 15 128)
             lsp-rust-analyzer-binding-mode-hints t
             lsp-rust-analyzer-check-all-targets nil ;; disable --all-targets for cargo check
             lsp-rust-analyzer-closing-brace-hints-min-lines 25
             lsp-rust-analyzer-closure-capture-hints t
             lsp-rust-analyzer-closure-return-type-hints "with_block"
             lsp-rust-analyzer-diagnostics-enable-experimental t
             lsp-rust-analyzer-discriminants-hints "always" ;; "fieldless"
             lsp-rust-analyzer-display-chaining-hints t
             lsp-rust-analyzer-display-closure-return-type-hints t
             lsp-rust-analyzer-display-lifetime-elision-hints-enable "always"
             lsp-rust-analyzer-display-lifetime-elision-hints-use-parameter-names t
             lsp-rust-analyzer-display-parameter-hints t
             lsp-rust-analyzer-display-reborrow-hints "always"
             lsp-rust-analyzer-expression-adjustment-hints "always"
             lsp-rust-analyzer-hide-closure-initialization t
             lsp-rust-analyzer-hide-named-constructor t
             lsp-rust-analyzer-implicit-drops t
             lsp-rust-analyzer-max-inlay-hint-length 25
             lsp-rust-analyzer-proc-macro-enable t
             lsp-rust-analyzer-lens-references-adt-enable t
             lsp-rust-analyzer-lens-references-method-enable t
             lsp-rust-analyzer-lens-references-trait-enable t
             lsp-rust-analyzer-lens-references-enum-variant-enable t
             lsp-rust-analyzer-server-display-inlay-hints t
             lsp-semantic-tokens-enable nil)
     #+end_src
**** When creating news language bugs
     [[https://rustc-dev-guide.rust-lang.org/building/suggested.html#configuring-rust-analyzer-for-rustc][Configuring rust-analyzer for rustc]]
     #+begin_src emacs-lisp
       ;; (setq
       ;;  lsp-rust-analyzer-rustfmt-override-command ["./build/x86_64-unknown-linux-gnu/stage0/bin/rustfmt", "--edition=2021"]
       ;;  lsp-rust-analyzer-cargo-run-build-scripts t
       ;;  lsp-rust-analyzer-rustc-source "./Cargo.toml"
       ;;  lsp-rust-analyzer-proc-macro-enable t)
     #+end_src
*** Unison
**** Unison mode
     #+begin_src emacs-lisp
       (use-package unisonlang-mode)
     #+end_src

*** Elixir
**** Elixir mode
     #+begin_src emacs-lisp
       (use-package elixir-mode
         :hook (elixir-mode . lsp)
         :init (add-to-list 'exec-path "~/.elixir_ls/"))
     #+end_src
**** Elixir snippets
     #+begin_src emacs-lisp
       (use-package elixir-yasnippets)
     #+end_src
**** Elixir flycheck
     #+begin_src emacs-lisp
       (use-package flycheck-elixir)
     #+end_src

*** Haskell
**** LSP
     #+begin_src emacs-lisp
       (use-package lsp-haskell
         :config
         (setq lsp-haskell-server-path "haskell-language-server-wrapper")
         (setq lsp-haskell-server-args ())
         :hook (haskell-mode . lsp))
     #+end_src

*** OCaml
**** ocaml mode
     #+begin_src emacs-lisp
       (use-package tuareg-mode
         :hook (tuareg-mode . lsp))
     #+end_src
**** dune mode
     #+begin_src emacs-lisp
       (use-package dune)
     #+end_src

*** TypeScript
    #+begin_src emacs-lisp
      (add-hook 'js-ts-mode-hook #'lsp)
      (add-hook 'typescript-ts-mode-hook #'lsp)
      (add-hook 'tsx-ts-mode-hook #'lsp)
    #+end_src
* Org
** install
   #+begin_src emacs-lisp
     (use-package org
       :ensure org-contrib)
   #+end_src
** basic settings
   #+begin_src emacs-lisp
     (setq
      ;; adapt indentation of content to match its heading
      org-adapt-indentation t
      org-ellipsis "  "
      org-hide-emphasis-markers t
      ;; non-nil = utf-8
      org-pretty-entities t
      org-startup-folded 'fold
      org-return-follows-link t
      ;; only needs one empty line to show an empty line when collapsed
      org-cycle-separator-lines 2
      ;; shift-select with mouse
      org-support-shift-select 'always
      ;; no help message when editing code
      org-edit-src-persistent-message nil
      line-spacing 0.5
      ;; disable a_b to be rendered as subscript, still can use a_{b} to get the same result
      org-export-with-sub-superscripts nil)

     (set-face-attribute 'org-ellipsis nil :inherit 'default :box nil)
   #+end_src
** custom faces
*** variable pitch
    #+begin_src emacs-lisp
      (use-package org-variable-pitch
        :hook (org-mode . variable-pitch-mode))
    #+end_src
*** fixed pitch
    #+begin_src emacs-lisp
      (require 'org-indent)
      (set-face-attribute 'org-block nil :foreground nil :inherit 'fixed-pitch)
      (set-face-attribute 'org-table nil  :inherit 'fixed-pitch)
      (set-face-attribute 'org-formula nil  :inherit 'fixed-pitch)
      (set-face-attribute 'org-code nil   :inherit '(shadow fixed-pitch))
      (set-face-attribute 'org-indent nil :inherit '(org-hide fixed-pitch))
      (set-face-attribute 'org-verbatim nil :inherit '(shadow fixed-pitch))
      (set-face-attribute 'org-special-keyword nil :inherit '(font-lock-comment-face fixed-pitch))
      (set-face-attribute 'org-meta-line nil :inherit '(font-lock-comment-face fixed-pitch))
      (set-face-attribute 'org-checkbox nil :inherit 'fixed-pitch)
    #+end_src

*** column views
    #+begin_src emacs-lisp
      (set-face-attribute 'org-column nil :background nil)
      (set-face-attribute 'org-column-title nil :background nil)
    #+end_src

** org superstar
   #+begin_src emacs-lisp
     ;; org-superstar needs this way
     (setq org-hide-leading-stars nil)

     (use-package org-superstar
       :after org
       :init
       (setq org-superstar-headline-bullets-list '(?● ?○)
             ;; fancy todo headings
             org-superstar-special-todo-items t
             ;; i use my own
             org-superstar-prettify-item-bullets nil)
       :hook (org-mode . org-superstar-mode))

     ;; This line is necessary.
     (setq org-superstar-leading-bullet ?\s)
     ;; If you use Org Indent you also need to add this, otherwise the
     ;; above has no effect while Indent is enabled.
     (setq org-indent-mode-turns-on-hiding-stars nil)
   #+end_src

** make invisible parts visible
   #+begin_src emacs-lisp
     (use-package org-appear
       :hook (org-mode . org-appear-mode))
   #+end_src
** org mode as the *scratch* buffer
   #+begin_src emacs-lisp
     (setq initial-major-mode 'org-mode)
   #+end_src
** pretty checkboxes
   https://jft.home.blog/2019/07/17/use-unicode-symbol-to-display-org-mode-checkboxes/
   #+begin_src emacs-lisp
     (defface org-checkbox-done-text
       '((t (:foreground "#71696A" :strike-through t)))
       "Face for the text part of a checked org-mode checkbox.")

     (font-lock-add-keywords
      'org-mode
      `(("^[ \t]*\\(?:[-+*]\\|[0-9]+[).]\\)[ \t]+\\(\\(?:\\[@\\(?:start:\\)?[0-9]+\\][ \t]*\\)?\\[\\(?:X\\|\\([0-9]+\\)/\\2\\)\\][^\n]*\n\\)"
         1 'org-checkbox-done-text prepend))
      'append)

     (add-hook 'org-mode-hook (lambda ()
                                "Beautify Org Checkbox Symbol"
                                (push '("[ ]" . "") prettify-symbols-alist)
                                (push '("[X]" . "" ) prettify-symbols-alist)
                                (push '("[-]" . "" ) prettify-symbols-alist)
                                (prettify-symbols-mode)))
   #+end_src
** pretty bullet list
   #+begin_src emacs-lisp
     (font-lock-add-keywords 'org-mode
                             '(("^ *\\([-]\\) "
                                (0 (prog1 () (compose-region (match-beginning 1) (match-end 1) "•"))))))
   #+end_src
** centralized
   #+begin_src emacs-lisp
     (use-package olivetti
       :hook
       (org-mode . olivetti-mode)
       (markdown-mode . olivetti-mode)
       :config (setq-default olivetti-body-width 140))

     (setq-default default-justification 'full)
   #+end_src
** org-roam
*** Load org-fold
    #+begin_src emacs-lisp
      (require 'org-fold)
    #+end_src
*** Install it
    #+begin_src emacs-lisp
      (use-package org-roam
        :bind (("C-c b f" . org-roam-node-find)
               ("C-c b i" . org-roam-node-insert)
               ("C-c b c" . org-roam-capture)
               ("C-c b g" . org-roam-graph)
               ("C-c b d" . org-roam-dailies-capture-today)
               ("C-c b D" . org-roam-dailies-goto-today)
               ("C-c b y" . org-roam-dailies-goto-previous))
        :config
        (cl-defmethod org-roam-node-keywords ((node org-roam-node))
          "Return the currently set category for the NODE."
          (cdr (assoc-string "KEYWORDS" (org-roam-node-properties node))))
        (cl-defmethod org-roam-node-authors ((node org-roam-node))
          "Return the currently set category for the NODE."
          (cdr (assoc-string "AUTHORS" (org-roam-node-properties node))))
        (setq org-roam-node-display-template
              (concat "${title:*} "
                      (propertize "${tags:15}" 'face 'org-tag)
                      (propertize "${keywords:20}" 'face 'org-tag)
                      (propertize "${authors:15}" 'face 'org-tag)))
        (org-roam-db-autosync-mode))
    #+end_src
*** Config
    #+begin_src emacs-lisp
      (setq
       org-roam-directory (file-truename "~/projects/brainiac/")
       org-roam-db-location (file-truename "~/projects/brainiac/org-roam.db")
       org-roam-dailies-directory "dailies/"
       org-roam-completion-everywhere t)
    #+end_src
*** Templates
**** Dailies
     #+begin_src emacs-lisp
       (setq
        org-roam-dailies-capture-templates
        '(("d" "default" entry
           "\n\n* %<%I:%M %p>: %?"
           :target (file+head "%<%Y-%m-%d>.org"
                              "#+TITLE: %<%Y-%m-%d>\n"))))
     #+end_src
**** Custom templates
***** Uncategorized
      #+begin_src emacs-lisp
        (setq org-roam-capture-templates
              '(("u" "uncategorized" plain
                 "* %?"
                 :target (file+head "%<%Y%m%d%H%M%S>-${slug}.org"
                                    "#+FILETAGS: :uncategorized:\n#+TITLE: ${title}\n#+DATE: %U\n\n")
                 :unnarrowed t)))
      #+end_src
***** Book
      #+begin_src emacs-lisp
        (add-to-list 'org-roam-capture-templates
                     '("k" "book" plain
                       "\n\n* Contents%?"
                       :target (file+head "%<%Y%m%d%H%M%S>-${slug}.org"
                                          ":PROPERTIES:\n:AUTHORS: %^{authors}\n:KEYWORDS: %^{keywords}\n:END:\n\n#+FILETAGS: :book:\n#+TITLE: ${title}\n#+DATE: %U\n")
                       :unnarrowed t))
      #+end_src
***** Paper
      #+begin_src emacs-lisp
        (add-to-list 'org-roam-capture-templates
                     '("p" "paper" plain
                       "* Reference\nYear: %^{year}\nLink: %^{Link}\n\n* Abstract\n%?"
                       :target (file+head "%<%Y%m%d%H%M%S>-${slug}.org"
                                          ":PROPERTIES:\n:AUTHORS: %^{authors}\n:KEYWORDS: %^{keywords}\n:END:\n\n#+FILETAGS: :paper:\n#+TITLE: ${title}\n#+DATE: %U\n")
                       :unnarrowed t))
      #+end_src

***** Blog post
      #+begin_src emacs-lisp
        (add-to-list 'org-roam-capture-templates
                     '("b" "blog post" plain
                       "* Reference\nYear: %^{year}\nLink: %^{link}\n\n* %?"
                       :target (file+head "%<%Y%m%d%H%M%S>-${slug}.org"
                                          ":PROPERTIES:\n:AUTHORS: %^{authors}\n:KEYWORDS: %^{keywords}\n:END:\n\n#+FILETAGS: :blog:\n#+TITLE: ${title}\n#+DATE: %U\n\n")
                       :unnarrowed t))
      #+end_src

***** therapy session
      #+begin_src emacs-lisp
        (add-to-list 'org-roam-capture-templates
                     '("s" "therapy session" entry
                       "** sessão %? - %<%Y/%m/%d>"
                       :target (file+head "20231113224353-therapy.org"
                                          "* Sessões")
                       ))
      #+end_src

***** dysfunctional thought
      #+begin_src emacs-lisp
        (add-to-list 'org-roam-capture-templates
                     '("t" "disfunctional thought" entry
                       "** [%<%Y/%m/%d %Hh%M>] "
                       :target (file+head "20231113224353-therapy.org"
                                          "* Disfunctional thought")
                       ))
      #+end_src

*** Org-roam-ui
    #+begin_src emacs-lisp
      (use-package org-roam-ui
        :after org-roam
        :config
        (setq org-roam-ui-sync-theme t
              org-roam-ui-follow t
              org-roam-ui-update-on-save t
              org-roam-ui-open-on-start t)
        (defun open-org-roam-ui ()
          (interactive)
          (when (not (bound-and-true-p org-roam-ui-mode))
            (org-roam-ui-mode))
          (org-roam-ui-open))
        :bind
        ("C-c b g" . open-org-roam-ui))
    #+end_src
*** Deft
    #+begin_src emacs-lisp
      (use-package deft
        :after org
        :bind
        ("<f8>" . deft)
        :config
        (setq deft-recursive t
              deft-use-filter-string-for-filename t
              deft-default-extension "org"
              deft-directory (file-truename "~/projects/brainiac")))

      (defun cm/deft-parse-title (file contents)
        "Parse the given FILE and CONTENTS and determine the title.
         If `deft-use-filename-as-title' is nil, the title is taken to
         be the first non-empty line of the FILE.  Else the base name of the FILE is
         used as title."
        (let ((begin (string-match "^#\\+[tT][iI][tT][lL][eE]: .*$" contents)))
          (if begin
              (string-trim (substring contents begin (match-end 0)) "#\\+[tT][iI][tT][lL][eE]: *" "[\n\t ]+")
            (deft-base-filename file))))

      (advice-add 'deft-parse-title :override #'cm/deft-parse-title)

      (setq deft-strip-summary-regexp
            (concat "\\("
                    "[\n\t]" ;; blank
                    "\\|^#\\+[[:alpha:]_]+:.*$" ;; org-mode metadata
                    "\\|^:PROPERTIES:\n\\(.+\n\\)+:END:\n"
                    "\\)"))
    #+end_src
** code blocks
*** treesit modes and code blocks
    #+begin_src emacs-lisp
      (add-to-list 'org-src-lang-modes (cons "rust" 'rust-ts))
      (add-to-list 'org-src-lang-modes (cons "go" 'go-ts))
    #+end_src
*** hide src blocks
    from https://emacs.stackexchange.com/a/31623
    #+begin_src emacs-lisp
      (with-eval-after-load 'org
        (defvar-local rasmus/org-at-src-begin -1
          "Variable that holds whether last position was a ")
        (defvar rasmus/ob-header-symbol ?☰
          "Symbol used for babel headers")
        (defun rasmus/org-prettify-src--update ()
          (let ((case-fold-search t)
                (re "^[ \t]*#\\+begin_src[ \t]+[^ \f\t\n\r\v]+[ \t]*")
                found)
            (save-excursion
              (goto-char (point-min))
              (while (re-search-forward re nil t)
                (goto-char (match-end 0))
                (let ((args (org-trim
                             (buffer-substring-no-properties (point)
                                                             (line-end-position)))))
                  (when (org-string-nw-p args)
                    (let ((new-cell (cons args rasmus/ob-header-symbol)))
                      (cl-pushnew new-cell prettify-symbols-alist :test #'equal)
                      (cl-pushnew new-cell found :test #'equal)))))
              (setq prettify-symbols-alist
                    (cl-set-difference prettify-symbols-alist
                                       (cl-set-difference
                                        (cl-remove-if-not
                                         (lambda (elm)
                                           (eq (cdr elm) rasmus/ob-header-symbol))
                                         prettify-symbols-alist)
                                        found :test #'equal)))
              ;; Clean up old font-lock-keywords.
              (font-lock-remove-keywords nil prettify-symbols--keywords)
              (setq prettify-symbols--keywords (prettify-symbols--make-keywords))
              (font-lock-add-keywords nil prettify-symbols--keywords)
              (while (re-search-forward re nil t)
                (font-lock-flush (line-beginning-position) (line-end-position))))))

        (defun rasmus/org-prettify-src ()
          "Hide src options via `prettify-symbols-mode'.

        `prettify-symbols-mode' is used because it has uncollpasing. It's
        may not be efficient."
          (let* ((case-fold-search t)
                 (at-src-block (save-excursion
                                 (beginning-of-line)
                                 (looking-at "^[ \t]*#\\+begin_src[ \t]+[^ \f\t\n\r\v]+[ \t]*"))))
            ;; Test if we moved out of a block.
            (when (or (and rasmus/org-at-src-begin
                           (not at-src-block))
                      ;; File was just opened.
                      (eq rasmus/org-at-src-begin -1))
              (rasmus/org-prettify-src--update))
            (setq rasmus/org-at-src-begin at-src-block)))

        (defun rasmus/org-prettify-symbols ()
          (mapc (apply-partially 'add-to-list 'prettify-symbols-alist)
                (cl-reduce 'append
                           (mapcar (lambda (x) (list x (cons (upcase (car x)) (cdr x))))
                                   `(("#+begin_src" . ?)
                                     ("#+end_src"   . ?)
                                     ("#+header:" . ,rasmus/ob-header-symbol)
                                     ("#+begin_quote" . ?)
                                     ("#+end_quote" . ?)
                                     ("#+begin_comment" . ?)
                                     ("#+end_comment" . ?)))))
          (turn-on-prettify-symbols-mode)
          (add-hook 'post-command-hook 'rasmus/org-prettify-src t t))
        (add-hook 'org-mode-hook #'rasmus/org-prettify-symbols))
    #+end_src
** automatically set task to DONE when all children are complete
   [[https://orgmode.org/manual/Breaking-Down-Tasks.html][doc]]
   #+begin_src emacs-lisp
     (defun org-summary-todo (n-done n-not-done)
       "Switch entry to DONE when all subentries are done, to TODO otherwise."
       (let (org-log-done org-log-states)   ; turn off logging
         (org-todo (if (= n-not-done 0) "DONE" "TODO"))))
     (add-hook 'org-after-todo-statistics-hook #'org-summary-todo)
   #+end_src
*** automatically set task DONE when all checkboxes are complete
    [[https://emacs.stackexchange.com/a/22147][source]]
    #+begin_src emacs-lisp
      (defun my/org-checkbox-todo ()
        "Switch header TODO state to DONE when all checkboxes are ticked, to TODO otherwise"
        (let ((todo-state (org-get-todo-state)) beg end)
          (unless (not todo-state)
            (save-excursion
              (org-back-to-heading t)
              (setq beg (point))
              (end-of-line)
              (setq end (point))
              (goto-char beg)
              (if (re-search-forward "\\[\\([0-9]*%\\)\\]\\|\\[\\([0-9]*\\)/\\([0-9]*\\)\\]"
                                     end t)
                  (if (match-end 1)
                      (if (equal (match-string 1) "100%")
                          (unless (string-equal todo-state "DONE")
                            (org-todo 'done))
                        (unless (string-equal todo-state "TODO")
                          (org-todo 'todo)))
                    (if (and (> (match-end 2) (match-beginning 2))
                             (equal (match-string 2) (match-string 3)))
                        (unless (string-equal todo-state "DONE")
                          (org-todo 'done))
                      (unless (string-equal todo-state "TODO")
                        (org-todo 'todo)))))))))

      (add-hook 'org-checkbox-statistics-hook 'my/org-checkbox-todo)
    #+end_src
** bigger font in titles
   #+begin_src emacs-lisp
     (setq org-hidden-keywords '(title)
           org-cycle-level-faces nil
           org-n-level-faces 4)
   #+end_src

* Utils
** Easy increase/decrease font size
   #+begin_src emacs-lisp
     (global-set-key (kbd "C-+") #'text-scale-increase)
     (global-set-key (kbd "C--") #'text-scale-decrease)
   #+end_src
** Kill current buffer
   #+begin_src emacs-lisp
     (global-set-key (kbd "C-x k") (lambda () (interactive) (kill-buffer (current-buffer))))
   #+end_src

** Use y-or-n
   #+begin_src emacs-lisp
     (defalias 'yes-or-no-p 'y-or-n-p)
   #+end_src

** Use spaces
   #+begin_src emacs-lisp
     (setq-default indent-tabs-mode nil)
     (setq-default tab-width 4)

     (defun consoli/infer-indentation-style ()
       "If our source file use tabs, we use tabs, if spaces, spaces.
         And if neither, we use the current indent-tabs-mode"
       (let ((space-count (how-many "^ " (point-min) (point-max)))
             (tab-count (how-many "^\t" (point-min) (point-max))))
         (if (> space-count tab-count) (setq indent-tabs-mode nil))
         (if (> tab-count space-count) (setq indent-tabs-mode t))))
     (add-hook 'prog-mode-hook #'consoli/infer-indentation-style)
   #+end_src
** Don't freeze
   #+begin_src emacs-lisp
     (defun suspend-if-in-shell ()
       "suspend process if the instance is not running in GUI"
       (progn
         (when (not (display-graphic-p))
           (suspend-emacs))))
     (global-set-key (kbd "C-z") (lambda () (interactive) (suspend-if-in-shell)))
   #+end_src
** Delete selection
   #+begin_src emacs-lisp
     (pending-delete-mode t)
     (delete-selection-mode t)
   #+end_src
** Smooth scrolling
   #+begin_src emacs-lisp
     (use-package good-scroll
       :config
       (good-scroll-mode 1))

     ;; always redraw immediately when scrolling
     ;; more responsive and doesn't hang
     (setq fast-but-imprecise-scrolling t
           redisplay-dont-pause 1
           jit-lock-defer-time 0)
   #+end_src
*** Preserve screen position
    #+begin_src emacs-lisp
      (setq scroll-preserve-screen-position t
            scroll-conservatively 101)
    #+end_src
** Backup files
*** Change backup directory
    By default, emacs saves the ~backup~~ files in the same directory the file is.
    #+begin_src emacs-lisp
      (setq backup-directory-alist '(("." . "~/.emacs.d/backup/per-save")))
    #+end_src
*** More backup files
    #+begin_src emacs-lisp
      (setq delete-old-versions t
            ;; number of new versions of a file to kept
            kept-new-versions 4
            ;; number of old version to kept
            kept-old-versions 3
            ;; numeric version control
            version-control t
            ;; copy files, dont rename them
            backup-by-copying t)
    #+end_src
*** Auto-save files
    Auto-save files are temporary files that Emacs creates until a file is saved.
    Emacs auto-saves whenever it crashes, after ~N~ keystrokes and after a timeout.
    #+begin_src emacs-lisp
      (setq auto-save-timeout 30 ;; seconds
            ;; keystrokes
            auto-save-interval 200)
    #+end_src
*** force backup of buffer
    https://stackoverflow.com/a/20824625
    #+begin_src emacs-lisp
      (defun force-backup-of-buffer ()
        ;; Make a special "per session" backup at the first save of each
        ;; emacs session.
        (when (not buffer-backed-up)
          ;; Override the default parameters for per-session backups.
          (let ((backup-directory-alist '(("" . "~/.emacs.d/backup/per-session")))
                (kept-new-versions 3))
            (backup-buffer)))
        ;; Make a "per save" backup on each save.  The first save results in
        ;; both a per-session and a per-save backup, to keep the numbering
        ;; of per-save backups consistent.
        (let ((buffer-backed-up nil))
          (backup-buffer)))
      (add-hook 'before-save-hook  'force-backup-of-buffer)
    #+end_src
** lockfiles
   #+begin_src emacs-lisp
     (setq create-lockfiles nil)
   #+end_src
** Do what i mean
   #+begin_src emacs-lisp
     (global-set-key (kbd "M-u") 'upcase-dwim)
     (global-set-key (kbd "M-l") 'downcase-dwim)
     (global-set-key (kbd "M-c") 'capitalize-dwim)
   #+end_src
** A Collection of Ridiculous Useful eXtensions
   #+begin_src emacs-lisp
     (use-package crux
       :bind ([remap kill-line] . crux-smart-kill-line)
       ([remap kill-whole-line] . crux-kill-whole-line)
       ("C-c d" . crux-duplicate-current-line-or-region)
       ("C-c M-d" . crux-duplicate-and-comment-current-line-or-region))
       #+end_src
** Read $PATH
   #+begin_src emacs-lisp
     (use-package exec-path-from-shell
       :init (exec-path-from-shell-initialize))
   #+end_src
** Smart go to beginning of line
   #+begin_src emacs-lisp
     (defun smarter-beginning-of-line (arg)
       "Move point back to indentation of beginning of line.
     Move point to the first non-whitespace character on this line.
     If point is already there, move to the beginning of the line.
     Effectively toggle between the first non-whitespace character and the beginning of the line.
     If ARG is not nil or 1, move forward ARG - 1 lines first. If point reaches the beginning or end of the buffer, stop there."

       (interactive "^p")
       (setq arg (or arg 1))
       (when (/= arg 1)
         (let ((line-move-visual nil))
           (forward-line (1- arg))))
       (let ((orig-point (point)))
         (back-to-indentation)
         (when (= orig-point (point))
           (move-beginning-of-line 1))))

     (global-set-key [remap move-beginning-of-line] 'smarter-beginning-of-line)
   #+end_src
** Open lines around
   #+begin_src emacs-lisp
     (defun consoli/insert-new-line-bellow ()
       (interactive)
       (let ((current-point (point)))
         (move-end-of-line 1)
         (open-line 1)
         (goto-char current-point)))
     (global-set-key (kbd "C-S-<down>") 'consoli/insert-new-line-bellow)

     (defun consoli/insert-new-line-above ()
       (interactive)
       (let ((current-point (point)))
         (move-beginning-of-line 1)
         (newline-and-indent)
         (indent-according-to-mode)
         (goto-char current-point)
         (forward-char)))
     (global-set-key (kbd "C-S-<up>") 'consoli/insert-new-line-above)
   #+end_src
** new line follow indentation
   #+begin_src emacs-lisp
     (global-set-key (kbd "RET") 'indent-new-comment-line)
   #+end_src
** Hide unwanted buffers when cycling
   #+begin_src emacs-lisp
     (set-frame-parameter (selected-frame) 'buffer-predicate #'buffer-file-name)
   #+end_src

** Hide native compile logs
   #+begin_src emacs-lisp
     (setq native-comp-async-report-warnings-errors nil)
   #+end_src

** no bell
   #+begin_src emacs-lisp
     (setq ring-bell-function 'ignore)
   #+end_src
** Spell checking
*** Jinx
    #+begin_src emacs-lisp
      (use-package jinx
        :hook (emacs-startup . global-jinx-mode)
        ;; `M-$` correct the word at point
        :config (setq jinx-languages "en_UK en_US pt_BR")
        :bind ([remap ispell-word] . jinx-correct))
    #+end_src
** Ccedilla in emacs
   #+begin_src emacs-lisp
     (global-set-key (kbd "ć") (lambda () (interactive) (insert "ç")))
     (global-set-key (kbd "Ć") (lambda () (interactive) (insert "Ç")))
   #+end_src
** hide commands in M-x which do not apply to the current mode
   #+begin_src emacs-lisp
     (setq read-extended-command-predicate #'command-completion-default-include-p)
   #+end_src
** tab always complete
   #+begin_src emacs-lisp
     (setq tab-always-indent 'complete)

     ;; for emacs 30 or newer
     (setq text-mode-ispell-word-completion nil)
   #+end_src
** dim marked region when using kill ring
   Taken from: https://www.youtube.com/watch?v=oQ9JE9kRwG8
   #+begin_src emacs-lisp
     (defun my/pulse-current-region (&rest _)
       "Pulse the current implicit or active region"
       (if mark-active
           (pulse-momentary-highlight-region (region-beginning) (region-end))
         (pulse-momentary-highlight-region (mark) (point))))

     (advice-add #'kill-ring-save :before #'my/pulse-current-region)
   #+end_src
* Appearance
** add frame borders and window dividers
   #+begin_src emacs-lisp
     (modify-all-frames-parameters
      '((right-divider-width . 10)
        (internal-border-width . 10)))
   #+end_src
** icons
   #+begin_src emacs-lisp
     (use-package all-the-icons)

     (use-package all-the-icons-nerd-fonts
       :straight
       (all-the-icons-nerd-fonts :host github :repo "mohkale/all-the-icons-nerd-fonts")
       :after all-the-icons
       :demand t
       :config
       (all-the-icons-nerd-fonts-prefer))

     (setq inhibit-compacting-font-caches t)
   #+end_src
** Themes
*** downloading themes
**** Doom themes
     #+begin_src emacs-lisp
       (use-package doom-themes
         :defer t
         :config
         (progn
           (setq doom-themes-enable-bold t
                 doom-themes-treemacs-theme "doom-colors"
                 doom-themes-enable-italic t)
           (doom-themes-treemacs-config)
           (doom-themes-org-config)))
     #+end_src
**** catppuccin
     #+begin_src emacs-lisp
       (use-package catppuccin-theme
         :defer t
         :init
         (setq catppuccin-flavor 'macchiato
               catppuccin-italic-comments t
               catppuccin-italic-variables t
               catppuccin-italic-blockquotes t))
     #+end_src
**** ef-themes
     #+begin_src emacs-lisp
       (use-package ef-themes
         :defer t)
     #+end_src
**** kaolin themes
     #+begin_src emacs-lisp
       (use-package kaolin-themes
         :config (kaolin-treemacs-theme)
         :defer t)
     #+end_src
**** spacemacs themes
     #+begin_src emacs-lisp
       (use-package spacemacs-theme
         :defer t
         :config
         (setq spacemacs-theme-comment-bg nil
               spacemacs-theme-keyword-italic t
               spacemacs-theme-org-bold t
               spacemacs-theme-comment-italic t))
     #+end_src
*** loading theme
    #+begin_src emacs-lisp
      (load-theme 'doom-one
                  :no-confirm)
    #+end_src
** UI
*** Splash screen
    #+begin_src emacs-lisp
      (setq inhibit-startup-screen t)
    #+end_src
*** Scratch buffer message
    #+begin_src emacs-lisp
      (setq initial-scratch-message nil
            inhibit-startup-echo-area-message t)
    #+end_src
*** Scroll bar
    #+begin_src emacs-lisp
      (scroll-bar-mode -1)
    #+end_src
*** Menu bar
    #+begin_src emacs-lisp
      (menu-bar-mode -1)
    #+end_src
*** Tool bar
    #+begin_src emacs-lisp
      (tool-bar-mode -1)
    #+end_src
*** Cursor type
    #+begin_src emacs-lisp
      (setq-default cursor-type 'bar)
    #+end_src
*** Highlight line
    #+begin_src emacs-lisp
      (global-hl-line-mode t)
    #+end_src
*** highlight todo
    #+begin_src emacs-lisp
      (use-package hl-todo
        :config
        (global-hl-todo-mode t))

      (define-key prog-mode-map (kbd "C-|") (lambda ()
                                              (interactive)
                                              (hl-todo-insert "TODO(matheus-consoli): ")))
    #+end_src
*** Only highlight text region
    #+begin_src emacs-lisp
      (set-face-attribute 'region nil :extend nil)
    #+end_src
*** Line numbers
**** Hook
     #+begin_src emacs-lisp
       (add-hook 'prog-mode-hook 'display-line-numbers-mode)
     #+end_src
**** Format
     #+begin_src emacs-lisp
       (fringe-mode '(15 . 10))
     #+end_src
*** fix color display when loading emacs in terminal
    #+begin_src emacs-lisp
      (defun enable-256color-term ()
        (interactive)
        (load-library "term/xterm")
        (terminal-init-xterm))

      (unless (display-graphic-p)
        (if (string-suffix-p "256color" (getenv "TERM"))
          (enable-256color-term)))
    #+end_src
** Tabs
*** Install
    #+begin_src emacs-lisp
      (use-package centaur-tabs
        :config
        ;; disable in modes
        (add-to-list 'centaur-tabs-excluded-prefixes "*Org")
        (add-to-list 'centaur-tabs-excluded-prefixes "*MULTI")
        (add-to-list 'centaur-tabs-excluded-prefixes "*Backtrace")
        (add-to-list 'centaur-tabs-excluded-prefixes "*scratch*")
        (add-to-list 'centaur-tabs-excluded-prefixes "*Process List")
        (add-to-list 'centaur-tabs-excluded-prefixes "*compilation")
        (add-to-list 'centaur-tabs-excluded-prefixes "*ansi-term*")
        (add-to-list 'centaur-tabs-excluded-prefixes "*Call Hierarchy*")
        (add-to-list 'centaur-tabs-excluded-prefixes "*github-notifications*")
        (add-to-list 'centaur-tabs-excluded-prefixes "*Warnings*")
        (add-to-list 'centaur-tabs-excluded-prefixes "*Help*")
        (add-to-list 'centaur-tabs-excluded-prefixes "*straight-")
        (add-to-list 'centaur-tabs-excluded-prefixes "*Messages*")
        ;; dap-mode ui
        (add-to-list 'centaur-tabs-excluded-prefixes "Locals")
        (add-to-list 'centaur-tabs-excluded-prefixes "Expressions")
        (add-to-list 'centaur-tabs-excluded-prefixes "Debug Sessions")

        (centaur-tabs-mode t)
        (centaur-tabs-enable-buffer-reordering)
        (centaur-tabs-group-by-projectile-project)
        (centaur-tabs-change-fonts (face-attribute 'default :font) 110)
        (centaur-tabs-headline-match)
        (setq centaur-tabs-adjust-buffer-order t
              centaur-tabs-enable-key-bindings t
              centaur-tabs-style "bar"
              centaur-tabs-height 27
              centaur-tabs-set-icons t
              centaur-tabs-plain-icons t
              centaur-tabs-gray-out-icons 'buffer
              centaur-tabs-icon-type "nerd-icons"
              centaur-tabs-set-bar 'over
              centaur-tabs-set-modified-marker t
              centaur-tabs-cycle-scope 'tabs
              centaur-tabs-left-edge-margin nil
              centaur-tabs-label-fixed-length 15))
    #+end_src
** treemacs
   #+begin_src emacs-lisp
     (use-package treemacs
       :config
       (treemacs-git-commit-diff-mode t)
       (treemacs-fringe-indicator-mode 'always)
       :bind
       (:map global-map
             ("C-c ; ;" . treemacs)
             ("C-c ; B" . treemacs-bookmark)
             ("C-c ; f" . treemacs-find-file)
             ("C-c ; g" . treemacs-find-tag)))
   #+end_src
*** treemacs extensions
    #+begin_src emacs-lisp
      (use-package treemacs-magit
        :after (treemacs magit))

      (use-package treemacs-projectile
        :after (treemacs projectile))

      (use-package treemacs-nerd-icons
        :after (treemacs))

      (use-package lsp-treemacs
        :after (lsp treemacs)
        :bind (:map lsp-mode-map
                    ("C-c l g s" . lsp-treemacs-symbols))
        :init (lsp-treemacs-sync-mode 1))
    #+end_src
** Font
*** Set font
    #+begin_src emacs-lisp
      (set-face-attribute 'default nil
                          ;; "Space Grotesk" ;; "Iosevka Curly" ;; "Monoid Nerd Font"
                          :font "Maple Mono" ;; "Martian Mono Std Lt" ;; "Monoid Nerd Font" ;; "Iosevka SS14" ;; "Iosevka Comfy Motion Duo" ;; "Baumans" ;; "CaskaydiaCove Nerd Font Propo"
                          :height 110)
      (global-auto-composition-mode t)
    #+end_src
*** COMMENT Pretty symbols

    #+begin_src emacs-lisp
      (when window-system
        (add-hook 'prog-mode-hook 'prettify-symbols-mode))
    #+end_src
*** Fix org mode tables
    #+begin_src emacs-lisp
      (set-face-attribute 'org-table nil :inherit 'fixed-pitch)
    #+end_src
*** ligatures
    #+begin_src emacs-lisp
      (use-package ligature
        :straight (:host github :repo "mickeynp/ligature.el")
        :config
        (ligature-set-ligatures 't '("www"))
        (ligature-set-ligatures
         'prog-mode
         '("-->" "//" "/**" "/*" "*/" "<!--" ":=" "->>" "<<-" "->" "<-"
           "<=>" "==" "!=" "<=" ">=" "=:=" "!==" "&&" "||" "..." ".."
           "|||" "///" "&&&" "===" "++" "--" "=>" "|>" "<|" "||>" "<||"
           "|||>" "<|||" ">>" "<<" "::=" "|]" "[|" "{|" "|}"
           "[<" ">]" ":?>" ":?" "/=" "[||]" "!!" "?:" "?." "::"
           "+++" "??" "###" "##" ":::" "####" ".?" "?=" "=!=" "<|>"
           "<:" ":<" ":>" ">:" "<>" "***" ";;" "/==" ".=" ".-" "__"
           "=/=" "<-<" "<<<" ">>>" "<=<" "<<=" "<==" "<==>" "==>" "=>>"
           ">=>" ">>=" ">>-" ">-" "<~>" "-<" "-<<" "=<<" "---" "<-|"
           "<=|" "/\\" "\\/" "|=>" "|~>" "<~~" "<~" "~~" "~~>" "~>"
           "<$>" "<$" "$>" "<+>" "<+" "+>" "<*>" "<*" "*>" "</>" "</" "/>"
           "<->" "..<" "~=" "~-" "-~" "~@" "^=" "-|" "_|_" "|-" "||-"
           "|=" "||=" "#{" "#[" "]#" "#(" "#?" "#_" "#_(" "#:" "#!" "#="
           "&="))
        (global-ligature-mode t))
    #+end_src
** Modeline
   #+begin_src emacs-lisp
     (use-package doom-modeline
       :config
       (use-package async)
       (use-package ghub)
       (setq
        auth-sources '("~/.authinfo.gpg")
        doom-modeline-height 30
        doom-modeline-bar-width 8
        doom-modeline-time-clock-size 0.4
        doom-modeline-hud t
        doom-modeline-github t
        doom-modeline-github-interval (* 30 60)
        doom-modeline-enable-word-count nil
        doom-modeline-buffer-encoding nil
        doom-modeline-support-imenu t
        doom-modeline-irc nil
        doom-modeline-position-line-format '()
        doom-modeline-percent-position '()
        doom-modeline-position-column-line-format '("%l:%c")
        doom-modeline-buffer-file-name-style 'relative-to-project
        doom-modeline-gnus nil
        doom-modeline-time-icon nil
        doom-modeline-buffer-modification-icon nil)
       :hook (after-init . doom-modeline-mode))
   #+end_src
*** Clock
    #+BEGIN_SRC emacs-lisp
      (setq-default display-time-default-load-average nil)
      (setq display-time-format " %I:%M\t\t")
      (display-time-mode 1)
    #+END_SRC
** custom set faces
   #+begin_src emacs-lisp
     (custom-set-faces
      '(mode-line ((t (:inherit 'default :family "Schibsted Grotesk" :height 120 :box nil))))
      '(mode-line-active ((t (:inherit mode-line :family "Schibsted Grotesk" :height 120 :box nil))))
      '(mode-line-inactive ((t (:inherit mode-line-active :family "Schibsted Grotesk" :height 120 :box nil))))
      '(doom-modeline-buffer-modified ((t (:inherit (warning)))))

      '(lsp-inlay-hint-parameter-face ((t :inherit lsp-inlay-hint-face
                                          :height 90)))
      '(lsp-inlay-hint-type-face ((t :inherit lsp-inlay-hint-face
                                     :height 90)))

      '(centaur-tabs-selected-modified ((t (:slant italic))))
      '(centaur-tabs-unselected-modified ((t (:slant italic))))


      '(font-lock-comment-face ((t :font "Maple Mono Italic" :slant italic))))

     (dolist (face '(window-divider
                     window-divider-first-pixel
                     window-divider-last-pixel))
       (face-spec-reset-face face)
       (set-face-foreground face (face-attribute 'default :background))
       (set-face-background face (face-attribute 'default :background)))
     (set-face-background 'fringe (face-attribute 'default :background))

     (dolist (face '((org-level-1 . 2.0)
                     (org-level-2 . 1.5)
                     (org-level-3 . 1.2)
                     (org-level-4 . 1.0)
                     (org-level-5 . 1.0)
                     (org-level-6 . 1.0)
                     (org-level-7 . 1.0)
                     (org-level-8 . 1.0)))
       (set-face-attribute (car face) nil :font "Short Stack" :weight 'medium :height (cdr face)))
   #+end_src
** custom theme set faces
   #+begin_src emacs-lisp
     (require 'org-indent)
     (custom-theme-set-faces
      'user
      '(fixed-pitch ((t (:family "Maple Mono" :height 140))))
      '(variable-pitch ((t (:family "Short Stack" :height 150))))
      '(org-block ((t (:inherit fixed-pitch))))
      '(org-code ((t (:inherit (shadow fixed-pitch)))))
      '(org-document-info-keyword ((t (:inherit (shadow fixed-pitch)))))
      '(org-indent ((t (:inherit (org-hide fixed-pitch)))))
      '(org-meta-line ((t (:inherit (font-lock-comment-face fixed-pitch)))))
      '(org-property-value ((t (:inherit fixed-pitch))) t)
      '(org-special-keyword ((t (:inherit (font-lock-comment-face fixed-pitch)))))
      ;; '(org-table ((t (:inherit fixed-pitch :foreground "#83a598")))) ;; beatiful green... but why?
      '(org-tag ((t (:inherit (shadow fixed-pitch) :weight bold :height 0.8))))
      '(org-verbatim ((t (:inherit (shadow fixed-pitch))))))
   #+end_src
